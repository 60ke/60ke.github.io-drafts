<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LookForAdmin</title>
  
  <subtitle>已是乾坤大，更怜草木青</subtitle>
  <link href="https://60ke.github.io/old_blogs/atom.xml" rel="self"/>
  
  <link href="https://60ke.github.io/old_blogs/"/>
  <updated>2022-04-09T04:00:43.686Z</updated>
  <id>https://60ke.github.io/old_blogs/</id>
  
  <author>
    <name>lsk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go泛型实践</title>
    <link href="https://60ke.github.io/old_blogs/2022/03/29/go%E6%B3%9B%E5%9E%8B%E5%AE%9E%E8%B7%B5/"/>
    <id>https://60ke.github.io/old_blogs/2022/03/29/go%E6%B3%9B%E5%9E%8B%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-03-29T10:23:34.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前go在1.18 dev版本中支持了泛型，当时大致的看了一下，但是考虑到是dev版本可能功能并没有完全确定，所以并没有进行练习。今天更新到<code>go1.18 darwin/arm64</code>发现可以直接用泛型了，写篇文章记下笔记。</p></blockquote><p>泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。各种程序设计语言和其编译器、运行环境对泛型的支持均不一样。Ada、Delphi、Eiffel、Java、C#、F#、Swift 和 Visual Basic .NET 称之为泛型（generics）；ML、Scala 和 Haskell 称之为参数多态（parametric polymorphism）；C++ 和 D称之为模板。具有广泛影响的1994年版的《Design Patterns》一书称之为参数化类型（parameterized type）。</p><p><strong>之前在使用RUST时经常用到泛型，泛型重要特征之一就是泛型约束(类型约束)。</strong> 通俗的讲，就是我们怎么用看起来像一种类型的表现方式来表示对多种数据类型的支持。笔者认为泛型是针对于强类型语言，提供一种类似弱类型语言的使用体验，泛型可以让开发者书写更少的代码片段，能够提升开发效率，但是并不能提升语言的执行效率，甚至会降低一部分执行效率(取决于泛型支持是在编译时的支持还是运行时的支持)，这也是go迟迟没有支持泛型的原因。</p><p>下面的python代码中实现了一个<code>sum</code>函数，对于参数<code>a,b</code>python中我们是可以传递整数，浮点数，字符串甚至与数组等支持<code>+</code>预算的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure><p>go之前不支持泛型的版本，我们需要针对每一种类型都做一次函数实现以支撑不同类型的调用。</p><p>先看go泛型的<a href="https://go.dev/doc/tutorial/generics#prerequisites">官方教程</a>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Number <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="keyword">int64</span> | <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Initialize a map for the integer values</span></span><br><span class="line">    ints := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int64</span>&#123;</span><br><span class="line">        <span class="string">&quot;first&quot;</span>: <span class="number">34</span>,</span><br><span class="line">        <span class="string">&quot;second&quot;</span>: <span class="number">12</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize a map for the float values</span></span><br><span class="line">    floats := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span>&#123;</span><br><span class="line">        <span class="string">&quot;first&quot;</span>: <span class="number">35.98</span>,</span><br><span class="line">        <span class="string">&quot;second&quot;</span>: <span class="number">26.99</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Non-Generic Sums: %v and %v\n&quot;</span>,</span><br><span class="line">        SumInts(ints),</span><br><span class="line">        SumFloats(floats))</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Generic Sums: %v and %v\n&quot;</span>,</span><br><span class="line">        SumIntsOrFloats[<span class="keyword">string</span>, <span class="keyword">int64</span>](ints),</span><br><span class="line">        SumIntsOrFloats[<span class="keyword">string</span>, <span class="keyword">float64</span>](floats))</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Generic Sums, type parameters inferred: %v and %v\n&quot;</span>,</span><br><span class="line">        SumIntsOrFloats(ints),</span><br><span class="line">        SumIntsOrFloats(floats))</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Generic Sums with Constraint: %v and %v\n&quot;</span>,</span><br><span class="line">        SumNumbers(ints),</span><br><span class="line">        SumNumbers(floats))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SumInts adds together the values of m.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumInts</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s <span class="keyword">int64</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        s += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SumFloats adds together the values of m.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumFloats</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s <span class="keyword">float64</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        s += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SumIntsOrFloats sums the values of map m. It supports both floats and integers</span></span><br><span class="line"><span class="comment">// as map values.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumIntsOrFloats</span>[<span class="title">K</span> <span class="title">comparable</span>, <span class="title">V</span> <span class="title">int64</span> | <span class="title">float64</span>]<span class="params">(m <span class="keyword">map</span>[K]V)</span> <span class="title">V</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s V</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        s += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SumNumbers sums the values of map m. Its supports both integers</span></span><br><span class="line"><span class="comment">// and floats as map values.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumNumbers</span>[<span class="title">K</span> <span class="title">comparable</span>, <span class="title">V</span> <span class="title">Number</span>]<span class="params">(m <span class="keyword">map</span>[K]V)</span> <span class="title">V</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s V</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        s += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上面的代码我们可以看到，go通过<code>|</code>运算符来实现类型约束，并且可以通过<code>interface</code>对其类型进行包装.官方示例为对map中的<code>value</code>进行求和.这里再实现一个类似前面提到的<code>python sum</code>函数的go泛型实现:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Number <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="keyword">int64</span> | <span class="keyword">float64</span> | <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span>[<span class="title">V</span> <span class="title">Number</span>]<span class="params">(a, b V)</span> <span class="title">V</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;之前go在1.18 dev版本中支持了泛型，当时大致的看了一下，但是考虑到是dev版本可能功能并没有完全确定，所以并没有进行练习。今天更新到&lt;code&gt;go1.18 darwin/arm64&lt;/code&gt;发现可以直接用泛型了，写篇文章记下笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="go" scheme="https://60ke.github.io/old_blogs/tags/go/"/>
    
    <category term="泛型" scheme="https://60ke.github.io/old_blogs/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>go的愚蠢bug</title>
    <link href="https://60ke.github.io/old_blogs/2021/12/20/go%E7%9A%84%E6%84%9A%E8%A0%A2bug/"/>
    <id>https://60ke.github.io/old_blogs/2021/12/20/go%E7%9A%84%E6%84%9A%E8%A0%A2bug/</id>
    <published>2021-12-20T14:25:52.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个”-”导致的bug"><a href="#一个”-”导致的bug" class="headerlink" title="一个”:=”导致的bug"></a>一个”:=”导致的bug</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gen_tx_input</span><span class="params">(addr, to, input, txtype <span class="keyword">string</span>, wt *Wallet)</span> <span class="params">(<span class="keyword">string</span>, []<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> contract_bytes []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> txtype == types.EvmDeployTx || txtype == types.ReglangDeployTx &#123;</span><br><span class="line">to = <span class="string">&quot;0x&quot;</span></span><br><span class="line"></span><br><span class="line">di := deployInput&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">if</span> err = strict_json_struct_unmarshal(input, &amp;di); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, contract_bytes, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> di.Sol == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, contract_bytes, fmt.Errorf(<span class="string">&quot;sol can&#x27;t be empty&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> di.ContractName == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, contract_bytes, fmt.Errorf(<span class="string">&quot;contract_name can&#x27;t be empty&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;compile_sol %v&quot;</span>, di)</span><br><span class="line">contract_bytes, err := compile_sol(di.Sol, di.ContractName, &amp;di.Ci)</span><br><span class="line">        <span class="comment">// contract_bytes, err = compile_sol(di.Sol, di.ContractName, &amp;di.Ci)</span></span><br><span class="line">fmt.Println(<span class="string">&quot;compile_sol bytes&quot;</span>, <span class="keyword">string</span>(contract_bytes))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;compile_sol err&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, contract_bytes, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input = <span class="string">&quot;0x&quot;</span> + hex.EncodeToString(contract_bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因<code>:=</code>导致产生了新的局部:<code>contract_bytes</code>从而没有返回预期的<code>contract_bytes</code></p><h2 id="结构体大小写导致的toml文件为保存"><a href="#结构体大小写导致的toml文件为保存" class="headerlink" title="结构体大小写导致的toml文件为保存"></a>结构体大小写导致的toml文件为保存</h2><p>代码如下，如果将结构体重的<code>Array</code>改为<code>array</code>则toml文件内容为空，因为go中的变量首字符小写相当于私有变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line">toml <span class="string">&quot;github.com/pelletier/go-toml&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">Array []<span class="keyword">string</span> <span class="string">`toml:&quot;array&quot; comment:&quot;array test&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> conf Config</span><br><span class="line">conf.Array = <span class="built_in">append</span>(conf.Array, <span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">conf.Array = <span class="built_in">append</span>(conf.Array, <span class="string">&quot;aab&quot;</span>)</span><br><span class="line">cfile, err := os.Create(<span class="string">&quot;test.toml&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cfile.Close()</span><br><span class="line"></span><br><span class="line">enc := toml.NewEncoder(cfile)</span><br><span class="line">enc.Order(toml.OrderPreserve)</span><br><span class="line">fmt.Println(conf)</span><br><span class="line"><span class="keyword">if</span> err := enc.Encode(&amp;conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一个”-”导致的bug&quot;&gt;&lt;a href=&quot;#一个”-”导致的bug&quot; class=&quot;headerlink&quot; title=&quot;一个”:=”导致的bug&quot;&gt;&lt;/a&gt;一个”:=”导致的bug&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>go汇编</title>
    <link href="https://60ke.github.io/old_blogs/2021/12/13/go%E6%B1%87%E7%BC%96/"/>
    <id>https://60ke.github.io/old_blogs/2021/12/13/go%E6%B1%87%E7%BC%96/</id>
    <published>2021-12-13T11:15:06.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch3-asm/ch3-01-basic.html">go汇编传送门:</a></p><p>首先创建一个pkg.go文件，内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg</span><br><span class="line"><span class="keyword">var</span> Id = <span class="number">9527</span></span><br></pre></td></tr></table></figure><p>用以下命令查看的Go语言程序对应的伪汇编代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go tool compile -S pkg.go</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">go build -gcflags=-S pkg.go</span><br><span class="line"><span class="comment"># -N关闭内联汇编</span></span><br><span class="line">go build -gcflags=<span class="string">&quot;-S -N&quot;</span> pkg.go</span><br></pre></td></tr></table></figure><p>其中gcflags,为go compile flags。关于gcflags的使用帮助可以使用<code>go help build</code>查看。运行命令我们可以看到下面的arm64汇编输出:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">go.cuinfo.producer.command-line-arguments SDWARFCUINFO dupok size=0</span><br><span class="line">        0x0000 2d 73 68 61 72 65 64                             -shared</span><br><span class="line">go.cuinfo.packagename.command-line-arguments SDWARFCUINFO dupok size=0</span><br><span class="line">        0x0000 70 6b 67                                         pkg</span><br><span class="line"><span class="string">&quot;&quot;</span>.Id SNOPTRDATA size=8</span><br><span class="line">        0x0000 37 25 00 00 00 00 00 00                          7%......</span><br><span class="line">go.info.command-line-arguments.Id SDWARFVAR dupok size=42</span><br><span class="line">        0x0000 08 63 6f 6d 6d 61 6e 64 2d 6c 69 6e 65 2d 61 72  .command-line-ar</span><br><span class="line">        0x0010 67 75 6d 65 6e 74 73 2e 49 64 00 09 03 00 00 00  guments.Id......</span><br><span class="line">        0x0020 00 00 00 00 00 00 00 00 00 01                    ..........</span><br><span class="line">        rel 29+8 t=1 <span class="string">&quot;&quot;</span>.Id+0</span><br><span class="line">        rel 37+4 t=31 go.info.int+0</span><br></pre></td></tr></table></figure><p>PS: amd64汇编要简单很多：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># command-line-arguments</span><br><span class="line">go.cuinfo.packagename.command-line-arguments SDWARFCUINFO dupok size&#x3D;0</span><br><span class="line">0x0000 70 6b 67                                         pkg</span><br><span class="line">&quot;&quot;.Id SNOPTRDATA size&#x3D;8</span><br><span class="line">0x0000 37 25 00 00 00 00 00 00                          7%......</span><br></pre></td></tr></table></figure><p>逐段分析汇编：<br>1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go.cuinfo.producer.command-line-arguments SDWARFCUINFO dupok size&#x3D;0</span><br><span class="line">        0x0000 2d 73 68 61 72 65 64                             -shared</span><br></pre></td></tr></table></figure><p><code>go.cuinfo.</code>来自(dwarf.go)[<a href="https://github.com/golang/go/blob/master/src/cmd/internal/dwarf/dwarf.go]%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%9A">https://github.com/golang/go/blob/master/src/cmd/internal/dwarf/dwarf.go]代码中的定义：</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CUInfoPrefix is the prefix for symbols containing information to</span></span><br><span class="line"><span class="comment">// populate the DWARF compilation unit info entries.</span></span><br><span class="line"><span class="keyword">const</span> CUInfoPrefix = <span class="string">&quot;go.cuinfo.&quot;</span></span><br></pre></td></tr></table></figure><p>dwraf全称debugging with attributed record formats。</p><ul><li>dwarf包的说明:<blockquote><p>Package dwarf provides access to DWARF debugging information loaded from executable files, as defined in the DWARF 2.0 Standard at <a href="http://dwarfstd.org/doc/dwarf-2.0.0.pdf">http://dwarfstd.org/doc/dwarf-2.0.0.pdf</a></p></blockquote></li><li>(dwarf wiki)[<a href="https://en.wikipedia.org/wiki/DWARF]">https://en.wikipedia.org/wiki/DWARF]</a></li><li>dwarf 相关资料(ibm)[<a href="https://developer.ibm.com/articles/au-dwarf-debug-format/]">https://developer.ibm.com/articles/au-dwarf-debug-format/]</a></li><li>(Parsing Go Binary DWARF Info)[<a href="https://www.grant.pizza/blog/dwarf/]">https://www.grant.pizza/blog/dwarf/]</a><br>关于dwraf的说明我们以后可以单独写一篇文章，这里大致了解其为一种广泛使用的标准化调试数据格式。<br>SDWARFCUINFO即为 section dwarf cuinfo，dupok定义在(textflag.h)[<a href="https://github.com/golang/go/blob/master/src/runtime/textflag.h]%E4%B8%AD%EF%BC%8C%E8%AF%A5%E6%96%87%E4%BB%B6%E5%AE%9A%E4%B9%89%E4%BA%86%E9%99%84%E5%8A%A0%E5%88%B0%E5%90%84%E7%A7%8D%E5%87%BD%E6%95%B0%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A0%87%E5%BF%97%E3%80%82%E7%BC%96%E8%AF%91%E5%99%A8%E3%80%81%E6%B1%87%E7%BC%96%E5%99%A8%E5%92%8C%E9%93%BE%E6%8E%A5%E5%99%A8%E9%83%BD%E5%BF%85%E9%A1%BB%E5%B0%B1%E8%BF%99%E4%BA%9B%E5%80%BC%E8%BE%BE%E6%88%90%E4%B8%80%E8%87%B4%E3%80%82(%E5%BE%85%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%AF%B4%E6%98%8E)">https://github.com/golang/go/blob/master/src/runtime/textflag.h]中，该文件定义了附加到各种函数和数据对象的标志。编译器、汇编器和链接器都必须就这些值达成一致。(待进一步说明)</a><br><code>0x0000 2d 73 68 61 72 65 64</code>为”-shared”的16进制ascii码，下<code>pkg</code>同。同样的”7%……”为”0x0000 37 25 00 00 00 00 00 00”的表示。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch3-asm/ch3-01-basic.html&quot;&gt;go汇编传送门:&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://60ke.github.io/old_blogs/tags/golang/"/>
    
    <category term="go汇编" scheme="https://60ke.github.io/old_blogs/tags/go%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>跨平台编译</title>
    <link href="https://60ke.github.io/old_blogs/2021/11/08/golang%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91/"/>
    <id>https://60ke.github.io/old_blogs/2021/11/08/golang%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91/</id>
    <published>2021-11-08T11:27:50.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang跨平台编译"><a href="#golang跨平台编译" class="headerlink" title="golang跨平台编译"></a>golang跨平台编译</h1><h2 id="运行go-tool-dist-list查看golang当前支持的平台"><a href="#运行go-tool-dist-list查看golang当前支持的平台" class="headerlink" title="运行go tool dist list查看golang当前支持的平台"></a>运行<code>go tool dist list</code>查看golang当前支持的平台</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">aix/ppc64</span><br><span class="line">android/386</span><br><span class="line">android/amd64</span><br><span class="line">android/arm</span><br><span class="line">android/arm64</span><br><span class="line">darwin/amd64</span><br><span class="line">darwin/arm64</span><br><span class="line">dragonfly/amd64</span><br><span class="line">freebsd/386</span><br><span class="line">freebsd/amd64</span><br><span class="line">freebsd/arm</span><br><span class="line">freebsd/arm64</span><br><span class="line">illumos/amd64</span><br><span class="line">ios/amd64</span><br><span class="line">ios/arm64</span><br><span class="line">js/wasm</span><br><span class="line">linux/386</span><br><span class="line">linux/amd64</span><br><span class="line">linux/arm</span><br><span class="line">linux/arm64</span><br><span class="line">linux/mips</span><br><span class="line">linux/mips64</span><br><span class="line">linux/mips64le</span><br><span class="line">linux/mipsle</span><br><span class="line">linux/ppc64</span><br><span class="line">linux/ppc64le</span><br><span class="line">linux/riscv64</span><br><span class="line">linux/s390x</span><br><span class="line">netbsd/386</span><br><span class="line">netbsd/amd64</span><br><span class="line">netbsd/arm</span><br><span class="line">netbsd/arm64</span><br><span class="line">openbsd/386</span><br><span class="line">openbsd/amd64</span><br><span class="line">openbsd/arm</span><br><span class="line">openbsd/arm64</span><br><span class="line">openbsd/mips64</span><br><span class="line">plan9/386</span><br><span class="line">plan9/amd64</span><br><span class="line">plan9/arm</span><br><span class="line">solaris/amd64</span><br><span class="line">windows/386</span><br><span class="line">windows/amd64</span><br><span class="line">windows/arm</span><br><span class="line">windows/arm64</span><br></pre></td></tr></table></figure><p>额外的说一句，go竟然支持<code>ios/amd64</code>以及官方支持<code>js/wasm</code></p><h2 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h2><h3 id="darwin-arm64"><a href="#darwin-arm64" class="headerlink" title="darwin/arm64"></a>darwin/arm64</h3><p>使用命令<code>GOOS=&quot;darwin&quot; GOARCH=&quot;arm64&quot; go build hello.go</code>编译<code>hello.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看hello的mach-o及大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file hello</span><br><span class="line">hello: Mach-O 64-bit executable arm64</span><br><span class="line"><span class="built_in">stat</span> -f <span class="string">&quot;%z bytes&quot;</span> hello                      </span><br><span class="line">1932594 bytes</span><br></pre></td></tr></table></figure><p>可以看到<code>hello</code>为<code>arm64</code>可执行文件</p><h3 id="darwin-amd64"><a href="#darwin-amd64" class="headerlink" title="darwin/amd64"></a>darwin/amd64</h3><p>使用命令<code>GOOS=&quot;darwin&quot; GOARCH=&quot;amd64&quot; go build hello.go</code>编译<code>hello.go</code><br>查看hello的mach-o及大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file hello</span><br><span class="line">hello: Mach-O 64-bit executable x86_64</span><br><span class="line">stat -f &quot;%z bytes&quot; hello</span><br><span class="line">1865360 bytes</span><br></pre></td></tr></table></figure><p>可以看到<code>hello</code>为<code>amd64</code>可执行文件</p><h3 id="linux-386"><a href="#linux-386" class="headerlink" title="linux/386"></a>linux/386</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GOOS=<span class="string">&quot;linux&quot;</span> GOARCH=<span class="string">&quot;amd64&quot;</span> go build hello.go</span><br><span class="line"><span class="built_in">stat</span> -f <span class="string">&quot;%z bytes&quot;</span> hello                     </span><br><span class="line">1766270 bytes</span><br><span class="line">file hello</span><br><span class="line">hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=4nLzeHpdkqWlrRwR6mPk/JAdxwggmJ5gsqVMt4mlt/Xol5lWt0hZOunqxxKn7P/es_ZQQWFuE-5KUihCVx5, not stripped</span><br></pre></td></tr></table></figure><p>测试上传到centos可正常运行</p><h3 id="linux-amd64"><a href="#linux-amd64" class="headerlink" title="linux/amd64"></a>linux/amd64</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GOOS=&quot;linux&quot; GOARCH=&quot;386&quot; go build hello.go</span><br><span class="line">file hello</span><br><span class="line">hello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, Go BuildID=xpuIhVMKxJXV7Bg0bcc5/c8f9swVvGB1bHVdYXYCv/yjdgnmlDdpgUtuOKuZZ8/k8vjZwJaP57BC6_zfTiQ, not stripped</span><br><span class="line">stat -f &quot;%z bytes&quot; hello</span><br><span class="line">1633884 bytes</span><br></pre></td></tr></table></figure><p>测试上传到centos可正常运行</p><h3 id="二进制大小"><a href="#二进制大小" class="headerlink" title="二进制大小"></a>二进制大小</h3><p>mac下<code>hello.go</code>amd64二进制比arm64的小.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GOOS=<span class="string">&quot;darwin&quot;</span> GOARCH=<span class="string">&quot;amd64&quot;</span> go build hello.go </span><br><span class="line"><span class="built_in">stat</span> -f <span class="string">&quot;%z bytes&quot;</span> hello</span><br><span class="line">1865360 bytes</span><br><span class="line">GOOS=<span class="string">&quot;darwin&quot;</span> GOARCH=<span class="string">&quot;arm64&quot;</span> go build hello.go </span><br><span class="line"><span class="built_in">stat</span> -f <span class="string">&quot;%z bytes&quot;</span> hello                      </span><br><span class="line">1932594 bytes</span><br></pre></td></tr></table></figure><p>linux amd64位比x86小(应该不限于linux)</p><p>PS:mac下可用<code>otool -L file</code>查看mach-o动态库依赖</p><h1 id="RUST"><a href="#RUST" class="headerlink" title="RUST"></a>RUST</h1><p>运行命令<code>rustup target list</code>查当前支持的平台:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">aarch64-apple-darwin (installed)</span><br><span class="line">aarch64-apple-ios</span><br><span class="line">aarch64-apple-ios-sim</span><br><span class="line">aarch64-fuchsia</span><br><span class="line">aarch64-linux-android</span><br><span class="line">aarch64-pc-windows-msvc</span><br><span class="line">aarch64-unknown-linux-gnu (installed)</span><br><span class="line">aarch64-unknown-linux-musl</span><br><span class="line">aarch64-unknown-none</span><br><span class="line">aarch64-unknown-none-softfloat</span><br><span class="line">arm-linux-androideabi</span><br><span class="line">arm-unknown-linux-gnueabi</span><br><span class="line">arm-unknown-linux-gnueabihf</span><br><span class="line">arm-unknown-linux-musleabi</span><br><span class="line">arm-unknown-linux-musleabihf</span><br><span class="line">armebv7r-none-eabi</span><br><span class="line">armebv7r-none-eabihf</span><br><span class="line">armv5te-unknown-linux-gnueabi</span><br><span class="line">armv5te-unknown-linux-musleabi</span><br><span class="line">armv7-linux-androideabi</span><br><span class="line">armv7-unknown-linux-gnueabi</span><br><span class="line">armv7-unknown-linux-gnueabihf</span><br><span class="line">armv7-unknown-linux-musleabi</span><br><span class="line">armv7-unknown-linux-musleabihf</span><br><span class="line">armv7a-none-eabi</span><br><span class="line">armv7r-none-eabi</span><br><span class="line">armv7r-none-eabihf</span><br><span class="line">asmjs-unknown-emscripten</span><br><span class="line">i586-pc-windows-msvc</span><br><span class="line">i586-unknown-linux-gnu</span><br><span class="line">i586-unknown-linux-musl</span><br><span class="line">i686-linux-android</span><br><span class="line">i686-pc-windows-gnu</span><br><span class="line">i686-pc-windows-msvc</span><br><span class="line">i686-unknown-freebsd</span><br><span class="line">i686-unknown-linux-gnu</span><br><span class="line">i686-unknown-linux-musl</span><br><span class="line">mips-unknown-linux-gnu</span><br><span class="line">mips-unknown-linux-musl</span><br><span class="line">mips64-unknown-linux-gnuabi64</span><br><span class="line">mips64-unknown-linux-muslabi64</span><br><span class="line">mips64el-unknown-linux-gnuabi64</span><br><span class="line">mips64el-unknown-linux-muslabi64</span><br><span class="line">mipsel-unknown-linux-gnu</span><br><span class="line">mipsel-unknown-linux-musl</span><br><span class="line">nvptx64-nvidia-cuda</span><br><span class="line">powerpc-unknown-linux-gnu</span><br><span class="line">powerpc64-unknown-linux-gnu</span><br><span class="line">powerpc64le-unknown-linux-gnu</span><br><span class="line">riscv32i-unknown-none-elf</span><br><span class="line">riscv32imac-unknown-none-elf</span><br><span class="line">riscv32imc-unknown-none-elf</span><br><span class="line">riscv64gc-unknown-linux-gnu</span><br><span class="line">riscv64gc-unknown-none-elf (installed)</span><br><span class="line">riscv64imac-unknown-none-elf</span><br><span class="line">s390x-unknown-linux-gnu</span><br><span class="line">sparc64-unknown-linux-gnu</span><br><span class="line">sparcv9-sun-solaris</span><br><span class="line">thumbv6m-none-eabi</span><br><span class="line">thumbv7em-none-eabi</span><br><span class="line">thumbv7em-none-eabihf</span><br><span class="line">thumbv7m-none-eabi</span><br><span class="line">thumbv7neon-linux-androideabi</span><br><span class="line">thumbv7neon-unknown-linux-gnueabihf</span><br><span class="line">thumbv8m.base-none-eabi</span><br><span class="line">thumbv8m.main-none-eabi</span><br><span class="line">thumbv8m.main-none-eabihf</span><br><span class="line">wasm32-unknown-emscripten</span><br><span class="line">wasm32-unknown-unknown (installed)</span><br><span class="line">wasm32-wasi</span><br><span class="line">x86_64-apple-darwin</span><br><span class="line">x86_64-apple-ios</span><br><span class="line">x86_64-fortanix-unknown-sgx</span><br><span class="line">x86_64-fuchsia</span><br><span class="line">x86_64-linux-android</span><br><span class="line">x86_64-pc-solaris</span><br><span class="line">x86_64-pc-windows-gnu</span><br><span class="line">x86_64-pc-windows-msvc</span><br><span class="line">x86_64-sun-solaris</span><br><span class="line">x86_64-unknown-freebsd</span><br><span class="line">x86_64-unknown-illumos</span><br><span class="line">x86_64-unknown-linux-gnu</span><br><span class="line">x86_64-unknown-linux-gnux32</span><br><span class="line">x86_64-unknown-linux-musl</span><br><span class="line">x86_64-unknown-netbsd</span><br><span class="line">x86_64-unknown-redox</span><br></pre></td></tr></table></figure><p>rust相对于go来说平台明显更多不知道是不是用了llvm的原因</p><h1 id="M1-mac-c编译x86"><a href="#M1-mac-c编译x86" class="headerlink" title="M1-mac-c编译x86"></a>M1-mac-c编译x86</h1><p>arm64是可以直接运行x86程序的,也可编译为x86:<br>下面例子来源于:<br><a href="https://stackoverflow.com/questions/68279407/does-intel-binary-run-faster-than-arm64-binary-on-m1-macbook">https://stackoverflow.com/questions/68279407/does-intel-binary-run-faster-than-arm64-binary-on-m1-macbook</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ arch</span><br><span class="line">arm64</span><br><span class="line">$ make</span><br><span class="line">arch -x86_64 cc fib.c -o x86.out</span><br><span class="line">arch -arm64 cc fib.c -o arm64.out</span><br><span class="line">file *.out</span><br><span class="line">arm64.out: Mach-O 64-bit executable arm64</span><br><span class="line">x86.out:   Mach-O 64-bit executable x86_64</span><br><span class="line">time .&#x2F;x86.out</span><br><span class="line">Fibonacci 45 is 1134903170</span><br><span class="line">        8.32 real         7.54 user         0.01 sys</span><br><span class="line">time .&#x2F;arm64.out</span><br><span class="line">Fibonacci 45 is 1134903170</span><br><span class="line">       10.21 real         9.77 user         0.01 sys</span><br></pre></td></tr></table></figure><p><code>cat fib.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">45</span>;</span><br><span class="line">  <span class="comment">// Print out number of characters in n</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Fibonacci %i is %i\n&quot;</span>, n, fibonacci(n));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;golang跨平台编译&quot;&gt;&lt;a href=&quot;#golang跨平台编译&quot; class=&quot;headerlink&quot; title=&quot;golang跨平台编译&quot;&gt;&lt;/a&gt;golang跨平台编译&lt;/h1&gt;</summary>
    
    
    
    
    <category term="rust" scheme="https://60ke.github.io/old_blogs/tags/rust/"/>
    
    <category term="golang" scheme="https://60ke.github.io/old_blogs/tags/golang/"/>
    
    <category term="c" scheme="https://60ke.github.io/old_blogs/tags/c/"/>
    
    <category term="跨平台" scheme="https://60ke.github.io/old_blogs/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂gcc</title>
    <link href="https://60ke.github.io/old_blogs/2021/10/29/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82gcc/"/>
    <id>https://60ke.github.io/old_blogs/2021/10/29/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82gcc/</id>
    <published>2021-10-29T11:24:47.000Z</published>
    <updated>2022-04-09T04:00:43.690Z</updated>
    
    <content type="html"><![CDATA[<p>最近又遇到gcc编译参数的问题了，之前因为拷贝博客md后删除了博客仓库，导致之前使用评论的笔记全部丢失了(还是用md靠谱啊)，再次重新记录说明一下。</p><p>上代码:<br>a.out</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -L&#x2F;lib64 -ldtcsp -ldtrtl -lskf -Wl,-rpath &#x2F;lib64&#x2F;</span><br><span class="line">root@user:&#x2F;home&#x2F;user&#x2F;liurs-test# readelf -d a.out </span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x2de0 contains 28 entries:</span><br><span class="line">  标记        类型                         名称&#x2F;值</span><br><span class="line"> 0x0000000000000001 (NEEDED)             共享库：[libdtcsp.so]</span><br><span class="line"> 0x0000000000000001 (NEEDED)             共享库：[libdtrtl.so]</span><br><span class="line"> 0x0000000000000001 (NEEDED)             共享库：[libskf.so]</span><br><span class="line"> 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]</span><br><span class="line"> 0x000000000000001d (RUNPATH)            Library runpath: [&#x2F;lib64&#x2F;]</span><br><span class="line"> 0x000000000000000c (INIT)               0x401000</span><br><span class="line"> 0x000000000000000d (FINI)               0x4011c4</span><br><span class="line"> 0x0000000000000019 (INIT_ARRAY)         0x403dd0</span><br><span class="line"> 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)</span><br><span class="line"> 0x000000000000001a (FINI_ARRAY)         0x403dd8</span><br><span class="line"> 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)</span><br><span class="line"> 0x000000006ffffef5 (GNU_HASH)           0x400308</span><br><span class="line"> 0x0000000000000005 (STRTAB)             0x4003a0</span><br><span class="line"> 0x0000000000000006 (SYMTAB)             0x400328</span><br><span class="line"> 0x000000000000000a (STRSZ)              127 (bytes)</span><br><span class="line"> 0x000000000000000b (SYMENT)             24 (bytes)</span><br><span class="line"> 0x0000000000000015 (DEBUG)              0x0</span><br><span class="line"> 0x0000000000000003 (PLTGOT)             0x404000</span><br><span class="line"> 0x0000000000000002 (PLTRELSZ)           48 (bytes)</span><br><span class="line"> 0x0000000000000014 (PLTREL)             RELA</span><br><span class="line"> 0x0000000000000017 (JMPREL)             0x400480</span><br><span class="line"> 0x0000000000000007 (RELA)               0x400450</span><br><span class="line"> 0x0000000000000008 (RELASZ)             48 (bytes)</span><br><span class="line"> 0x0000000000000009 (RELAENT)            24 (bytes)</span><br><span class="line"> 0x000000006ffffffe (VERNEED)            0x400430</span><br><span class="line"> 0x000000006fffffff (VERNEEDNUM)         1</span><br><span class="line"> 0x000000006ffffff0 (VERSYM)             0x400420</span><br><span class="line"> 0x0000000000000000 (NULL)               0x0</span><br></pre></td></tr></table></figure><p>a.out1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -L&#x2F;lib64 -ldtcsp -Wl,-rpath &#x2F;lib64&#x2F; -o a.out1</span><br><span class="line">root@user:&#x2F;home&#x2F;user&#x2F;liurs-test# ls -al</span><br><span class="line">-rwxr-xr-x  1 root root 16464 10月 29 10:36 a.out</span><br><span class="line">-rwxr-xr-x  1 root root 16464 10月 29 10:36 a.out1</span><br><span class="line"></span><br><span class="line">068c56db4735486831000b6076e12e3c31fec90c1cbfd99ee7eacd41a54bfbe9  a.out</span><br><span class="line"></span><br><span class="line">ecf8902d32de250bb78a43e1801dbad979f21b3faa9d9688f663c7b953c49e2d  a.out1</span><br><span class="line"></span><br><span class="line">root@user:&#x2F;home&#x2F;user&#x2F;liurs-test# readelf -d a.out1</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x2e00 contains 26 entries:</span><br><span class="line">  标记        类型                         名称&#x2F;值</span><br><span class="line"> 0x0000000000000001 (NEEDED)             共享库：[libdtcsp.so]</span><br><span class="line"> 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]</span><br><span class="line"> 0x000000000000001d (RUNPATH)            Library runpath: [&#x2F;lib64&#x2F;]</span><br><span class="line"> 0x000000000000000c (INIT)               0x401000</span><br><span class="line"> 0x000000000000000d (FINI)               0x4011c4</span><br><span class="line"> 0x0000000000000019 (INIT_ARRAY)         0x403df0</span><br><span class="line"> 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)</span><br><span class="line"> 0x000000000000001a (FINI_ARRAY)         0x403df8</span><br><span class="line"> 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)</span><br><span class="line"> 0x000000006ffffef5 (GNU_HASH)           0x400308</span><br><span class="line"> 0x0000000000000005 (STRTAB)             0x4003a0</span><br><span class="line"> 0x0000000000000006 (SYMTAB)             0x400328</span><br><span class="line"> 0x000000000000000a (STRSZ)              105 (bytes)</span><br><span class="line"> 0x000000000000000b (SYMENT)             24 (bytes)</span><br><span class="line"> 0x0000000000000015 (DEBUG)              0x0</span><br><span class="line"> 0x0000000000000003 (PLTGOT)             0x404000</span><br><span class="line"> 0x0000000000000002 (PLTRELSZ)           48 (bytes)</span><br><span class="line"> 0x0000000000000014 (PLTREL)             RELA</span><br><span class="line"> 0x0000000000000017 (JMPREL)             0x400468</span><br><span class="line"> 0x0000000000000007 (RELA)               0x400438</span><br><span class="line"> 0x0000000000000008 (RELASZ)             48 (bytes)</span><br><span class="line"> 0x0000000000000009 (RELAENT)            24 (bytes)</span><br><span class="line"> 0x000000006ffffffe (VERNEED)            0x400418</span><br><span class="line"> 0x000000006fffffff (VERNEEDNUM)         1</span><br><span class="line"> 0x000000006ffffff0 (VERSYM)             0x40040a</span><br><span class="line"> 0x0000000000000000 (NULL)               0x0</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近又遇到gcc编译参数的问题了，之前因为拷贝博客md后删除了博客仓库，导致之前使用评论的笔记全部丢失了(还是用md靠谱啊)，再次重新记录说明一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="c" scheme="https://60ke.github.io/old_blogs/tags/c/"/>
    
    <category term="linux" scheme="https://60ke.github.io/old_blogs/tags/linux/"/>
    
    <category term="gcc" scheme="https://60ke.github.io/old_blogs/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>go并发map</title>
    <link href="https://60ke.github.io/old_blogs/2021/10/26/go%E5%B9%B6%E5%8F%91map/"/>
    <id>https://60ke.github.io/old_blogs/2021/10/26/go%E5%B9%B6%E5%8F%91map/</id>
    <published>2021-10-26T16:18:24.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="golang默认map不是并发安全的"><a href="#golang默认map不是并发安全的" class="headerlink" title="golang默认map不是并发安全的"></a>golang默认map不是并发安全的</h2><p>(Why are map operations not defined to be atomic?)[<a href="https://golang.org/doc/faq#atomic_maps]">https://golang.org/doc/faq#atomic_maps]</a><br>After long discussion it was decided that the typical use of maps did not require safe access from multiple goroutines, and in those cases where it did, the map was probably part of some larger data structure or computation that was already synchronized. Therefore requiring that all map operations grab a mutex would slow down most programs and add safety to few. This was not an easy decision, however, since it means uncontrolled map access can crash the program.</p><p>The language does not preclude atomic map updates. When required, such as when hosting an untrusted program, the implementation could interlock map access.</p><p>Map access is unsafe only when updates are occurring. As long as all goroutines are only reading—looking up elements in the map, including iterating through it using a for range loop—and not changing the map by assigning to elements or doing deletions, it is safe for them to access the map concurrently without synchronization.</p><p>As an aid to correct map use, some implementations of the language contain a special check that automatically reports at run time when a map is modified unsafely by concurrent execution.</p><p>下面的<code>main.go</code>一段map并发的代码:</p><ul><li><code>main.go</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">type</span> M <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.RWMutex</span><br><span class="line">m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">tar := M&#123;</span><br><span class="line">m: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;maini:&quot;</span>, i)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">tar.Lock()</span><br><span class="line">fmt.Println(<span class="string">&quot;goi:&quot;</span>, i)</span><br><span class="line">tar.m[i] = i</span><br><span class="line">tar.Unlock()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> k <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span>; k++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;k:&quot;</span>, k)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;maink:&quot;</span>, k)</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v&quot;</span>, tar.m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行<code>go run -race main.go</code>执行代码并对其进行竞争条件检测，获取到如下输出:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">maini: 0</span><br><span class="line">maini: 1</span><br><span class="line">maini: 2</span><br><span class="line">==================</span><br><span class="line">WARNING: DATA RACE</span><br><span class="line">Read at 0x00c00013c028 by goroutine 7:</span><br><span class="line">  main.main.func1()</span><br><span class="line">      /Users/k/Desktop/web/main/main.go:25 +0x6c</span><br><span class="line"></span><br><span class="line">Previous write at 0x00c00013c028 by main goroutine:</span><br><span class="line">  main.main()</span><br><span class="line">      /Users/k/Desktop/web/main/main.go:17 +0x214</span><br><span class="line"></span><br><span class="line">Goroutine 7 (running) created at:</span><br><span class="line">  main.main()</span><br><span class="line">      /Users/k/Desktop/web/main/main.go:20 +0x1f4</span><br><span class="line">==================</span><br><span class="line">goi: 2</span><br><span class="line">goi: 3</span><br><span class="line">k: 0</span><br><span class="line">goi: 3</span><br><span class="line">maink: 1</span><br><span class="line">map[2:2 3:3]Found 1 data race(s)</span><br><span class="line">exit status 66</span><br></pre></td></tr></table></figure>观察代码，我们已经通过<code>sync.RWMutex</code>使结构体<code>M</code>支持读写锁。并在操作<code>tar.m</code>时通过<code>tar.Lock()</code>与<code>tar.UnLock()</code>来确保了数据的安全，但是还是出现了<code>DATA RACE</code>，同时我们可以看到t<code>ar.m</code>的map数据并不是我们期望的<code>[1:1,2:2,3:3]</code>这是因为我们忽略了<code>tar.m[i]</code>中的<code>i</code>值来自<code>main</code>的goroutine，<code>main</code>的goroutine运行要比我们使用go关键字所创造的goroutine运行的快，我们的三次对map的赋值的<code>key</code>分别是 <code>2，3，3</code>所以我们的map只有<code>2,3</code>的<code>key</code>。我们可以通过传递i到goroutine中来解决这个错误:<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">tar.Lock()</span><br><span class="line">fmt.Println(<span class="string">&quot;goi:&quot;</span>, i)</span><br><span class="line">tar.m[i] = i</span><br><span class="line">tar.Unlock()</span><br><span class="line">&#125;(i)</span><br></pre></td></tr></table></figure>go1.9中也提供了并发安全带map:(sync.Map)[<a href="https://pkg.go.dev/sync#Map]">https://pkg.go.dev/sync#Map]</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;golang默认map不是并发安全的&quot;&gt;&lt;a href=&quot;#golang默认map不是并发安全的&quot; class=&quot;headerlink&quot; title=&quot;golang默认map不是并发安全的&quot;&gt;&lt;/a&gt;golang默认map不是并发安全的&lt;/h2&gt;</summary>
    
    
    
    
    <category term="go" scheme="https://60ke.github.io/old_blogs/tags/go/"/>
    
    <category term="并发" scheme="https://60ke.github.io/old_blogs/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>linux判断磁盘是否为固态</title>
    <link href="https://60ke.github.io/old_blogs/2021/10/20/linux%E5%88%A4%E6%96%AD%E7%A3%81%E7%9B%98%E6%98%AF%E5%90%A6%E4%B8%BA%E5%9B%BA%E6%80%81/"/>
    <id>https://60ke.github.io/old_blogs/2021/10/20/linux%E5%88%A4%E6%96%AD%E7%A3%81%E7%9B%98%E6%98%AF%E5%90%A6%E4%B8%BA%E5%9B%BA%E6%80%81/</id>
    <published>2021-10-20T14:48:58.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<p>参见：<a href="https://blog.csdn.net/sch0120/article/details/77725658">https://blog.csdn.net/sch0120/article/details/77725658</a></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>判断<code>cat /sys/block/*/queue/rotational</code>的返回值（其中*为你的硬盘设备名称，例如sda等等），如果返回1则表示磁盘可旋转，那么就是HDD了；反之，如果返回0，则表示磁盘不可以旋转，那么就有可能是SSD了</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>使用<code>lsblk</code>命令进行判断，参数<code>-d</code>表示显示设备名称，参数<code>-o</code>表示仅显示特定的列。<br><code>lsblk -d -o name,rota</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">NAME   ROTA</span><br><span class="line">loop0     0</span><br><span class="line">loop1     0</span><br><span class="line">loop2     0</span><br><span class="line">loop3     0</span><br><span class="line">loop4     0</span><br><span class="line">loop5     0</span><br><span class="line">loop6     0</span><br><span class="line">loop7     0</span><br><span class="line">loop8     0</span><br><span class="line">loop9     0</span><br><span class="line">loop10    0</span><br><span class="line">loop11    0</span><br><span class="line">loop12    0</span><br><span class="line">loop13    0</span><br><span class="line">loop14    0</span><br><span class="line">loop15    0</span><br><span class="line">loop16    0</span><br><span class="line">loop18    0</span><br><span class="line">sda       0</span><br><span class="line">sdb       1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;参见：&lt;a href=&quot;https://blog.csdn.net/sch0120/article/details/77725658&quot;&gt;https://blog.csdn.net/sch0120/article/details/77725658&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://60ke.github.io/old_blogs/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>一些问题</title>
    <link href="https://60ke.github.io/old_blogs/2021/10/08/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://60ke.github.io/old_blogs/2021/10/08/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2021-10-08T11:25:01.000Z</published>
    <updated>2022-04-09T04:00:43.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux-ps-ef看不到当前进程解惑"><a href="#linux-ps-ef看不到当前进程解惑" class="headerlink" title="linux ps -ef看不到当前进程解惑"></a>linux ps -ef看不到当前进程解惑</h2><p>如下脚本:<br>cpu_usage.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    grep <span class="string">&#x27;cpu &#x27;</span> /proc/<span class="built_in">stat</span> | awk <span class="string">&#x27;&#123;usage=($2+$4)*100/($2+$4+$5)&#125; END &#123;print int(usage)&#125;&#x27;</span></span><br><span class="line">    sleep 3</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>然后添加<code>x</code>权限运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x cpu_usage.sh</span><br><span class="line">.&#x2F;cpu_usage.sh</span><br></pre></td></tr></table></figure><p>此时我们运行<code>ps -ef |grep cpu_usage.sh</code>看不到相关进程。但是我们使用<code>bash ./cpu_usage.sh</code>可以看到相关进程。亦或者我们在<code>cpu_usage.sh</code>中加入shebang([英: ʃɪˈbæŋ])也能在<code>ps</code>命令中看到其名字相关的进程。那么我们不加shebang的进程去哪了？我们稍微改动一下脚本，再来观察<br>cpu_usageV1.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    grep <span class="string">&#x27;cpu &#x27;</span> /proc/<span class="built_in">stat</span> | awk <span class="string">&#x27;&#123;usage=($2+$4)*100/($2+$4+$5)&#125; END &#123;print int(usage)&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> $$</span><br><span class="line">    sleep 3</span><br><span class="line">    <span class="built_in">echo</span> $$</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>此时直接运行脚本并grep相关进程号我们可以看到，与其相关的进程有一个名为<code>bash</code>和名为<code>sleep 3</code>的进程，这说明当前的脚本在没有加入shebang的情况下，以名为<code>bash</code>和<code>sleep</code>运行了</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;linux-ps-ef看不到当前进程解惑&quot;&gt;&lt;a href=&quot;#linux-ps-ef看不到当前进程解惑&quot; class=&quot;headerlink&quot; title=&quot;linux ps -ef看不到当前进程解惑&quot;&gt;&lt;/a&gt;linux ps -ef看不到当前进程解惑&lt;/h2&gt;</summary>
    
    
    
    
    <category term="开发" scheme="https://60ke.github.io/old_blogs/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>emacs</title>
    <link href="https://60ke.github.io/old_blogs/2021/09/29/emacs/"/>
    <id>https://60ke.github.io/old_blogs/2021/09/29/emacs/</id>
    <published>2021-09-29T15:06:54.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="emacs-介绍"><a href="#emacs-介绍" class="headerlink" title="emacs 介绍"></a>emacs 介绍</h1><h2 id="关于emacs的一些疑问"><a href="#关于emacs的一些疑问" class="headerlink" title="关于emacs的一些疑问"></a>关于emacs的一些疑问</h2><h2 id="What-English-abbreviations-are-“setq”-“car”-and-“cdr”-in-LISP"><a href="#What-English-abbreviations-are-“setq”-“car”-and-“cdr”-in-LISP" class="headerlink" title="What English abbreviations are “setq”, “car”, and “cdr” in LISP?"></a><a href="https://www.quora.com/What-English-abbreviations-are-setq-car-and-cdr-in-LISP">What English abbreviations are “setq”, “car”, and “cdr” in LISP?</a></h2><p>author:<a href="https://www.quora.com/profile/Rich-Alderson">Rich-Alderson</a></p><blockquote><p>EDIT: I misremembered the computer model number, which Panicz Godek points out. It was the IBM 704, rather than the related 709.</p></blockquote><blockquote><p>What English abbreviations are “setq”, “car”, and “cdr” in LISP?</p></blockquote><blockquote><p>This question takes us back to the 1950s and the architecture of the IBM 704 computer on which LISP was first implemented.</p></blockquote><blockquote><p>First, let’s look at the special form SETQ, which assigns a value to an atom. Originally, there was only the special form SET, which evaluates the first argument to get the atom to which to assign the value of the evaluated second argument: (SET (A) B). Because this was such a common idiom, a new special form SETQ, meaning “set-quote”, was created: (SETQ A B) gives the same result as the previous form.</p></blockquote><blockquote><p>Now, on to the 704. You need to learn some different terminology here. Storage words were called registers; they are not what are we call registers today, which were specialized and had unique names: The accumulator or AC, the multiply-quotient or MQ, and the indexes. Memory referred to tape or disk.</p></blockquote><blockquote><p>Words were 36 bits long; addresses were 15 bits, allowing a whopping 32K of storage. Each word was divided into 4 parts: The address and the decrement were each 15 bits long, the index and tag were each 3 bits long. Thus, a word could hold 2 addresses and 2 other quantities.</p></blockquote><blockquote><p>In the original LISP, all 4 parts of the word were usable, and the functions which referenced these were named for these parts: The Content-of-the-Address-part-of the-Register was CAR, the Content-of-the-Decrement-part-of-the-Register or CDR, and similarly for CIR and CTR. These latter 2 were quickly dropped as not having any real use, so we were left with just CAR and CDR.</p></blockquote><blockquote><p>I refer you to Herbert Stoyan’s paper in the proceedings of the 1984 ACM Conference on Lisp and Functional Programming entitled “Early LISP History (1956-1959)”, which I had the pleasure of hearing in person (Austin, Texas, August 1984): Early LISP history (1956 - 1959)</p></blockquote><h2 id="Curiosity-What-does-progn-stands-for"><a href="#Curiosity-What-does-progn-stands-for" class="headerlink" title="Curiosity: What does progn stands for?"></a><a href="https://emacs.stackexchange.com/questions/5829/curiosity-what-does-progn-stands-for">Curiosity: What does progn stands for?</a></h2><ul><li><p>progn is a special form borrowed from CL-like Lisp dialects. In their implementations it’s composed from multiple progs, expressions that are evaluated and a number that specifies which expression value is returned. prog1 for instance evaluates all expressions and returns the value of the first, prog2 evaluates all expressions and returns the value of the second, progn evaluates all expressions and returns the n’th, or rather, the last expression’s value.</p></li><li><p>progn in Emacs Lisp is the equivalent of Clojure’s do which is used as means to bundle multiple expressions into a single one. You’ll need to use it for Clojure’s if conditional for instance.</p></li></ul><h1 id="lisp-学习"><a href="#lisp-学习" class="headerlink" title="lisp 学习"></a><a href="https://learnxinyminutes.com/docs/zh-cn/elisp-cn/">lisp 学习</a></h1><h2 id="15分钟学会Emacs-Lisp-v0-2a"><a href="#15分钟学会Emacs-Lisp-v0-2a" class="headerlink" title="15分钟学会Emacs Lisp (v0.2a)"></a>15分钟学会Emacs Lisp (v0.2a)</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 15分钟学会Emacs Lisp (v0.2a)</span></span><br><span class="line"><span class="comment">;;（作者：bzg，https://github.com/bzg </span></span><br><span class="line"><span class="comment">;;  译者：lichenbo，http://douban.com/people/lichenbo）</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 请先阅读Peter Norvig的一篇好文:</span></span><br><span class="line"><span class="comment">;; http://norvig.com/21-days.html</span></span><br><span class="line"><span class="comment">;; （译者注：中文版请见http://blog.youxu.info/21-days/）</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 之后安装GNU Emacs 24.3:</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; Debian: apt-get install emacs (视具体发行版而定)</span></span><br><span class="line"><span class="comment">;; MacOSX: http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg</span></span><br><span class="line"><span class="comment">;; Windows: http://ftp.gnu.org/gnu/windows/emacs/emacs-24.3-bin-i386.zip</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 更多信息可以在这里找到:</span></span><br><span class="line"><span class="comment">;; http://www.gnu.org/software/emacs/#Obtaining</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 很重要的警告:</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 按照这个教程来学习并不会对你的电脑有任何损坏</span></span><br><span class="line"><span class="comment">;; 除非你自己在学习的过程中愤怒地把它砸了</span></span><br><span class="line"><span class="comment">;; 如果出现了这种情况，我不会承担任何责任</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line"><span class="comment">;; </span></span><br><span class="line"><span class="comment">;; 打开emacs</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 按&#x27;q&#x27;消除欢迎界面</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 现在请注意窗口底部的那一个灰色长条</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; &quot;*scratch*&quot; 是你现在编辑界面的名字。</span></span><br><span class="line"><span class="comment">;; 这个编辑界面叫做一个&quot;buffer&quot;。</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 每当你打开Emacs时，都会默认打开这个scratch buffer</span></span><br><span class="line"><span class="comment">;; 此时你并没有在编辑任何文件，而是在编辑一个buffer</span></span><br><span class="line"><span class="comment">;; 之后你可以将这个buffer保存到一个文件中。</span></span><br><span class="line"><span class="comment">;; </span></span><br><span class="line"><span class="comment">;; 之后的&quot;Lisp interaction&quot; 则是表明我们可以用的某组命令</span></span><br><span class="line"><span class="comment">;; </span></span><br><span class="line"><span class="comment">;; Emacs在每个buffer中都有一组内置的命令</span></span><br><span class="line"><span class="comment">;; 而当你激活某种特定的模式时，就可以使用相应的命令</span></span><br><span class="line"><span class="comment">;; 这里我们使用`lisp-interaction-mode&#x27;，</span></span><br><span class="line"><span class="comment">;; 这样我们就可以使用内置的Emacs Lisp（以下简称Elisp）命令了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 分号是注释开始的标志</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; Elisp 是由符号表达式构成的 (即&quot;s-表达式&quot;或&quot;s式&quot;):</span></span><br><span class="line">(<span class="name">+</span> <span class="number">2</span> <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 这个s式的意思是 &quot;对2进行加2操作&quot;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; s式周围有括号，而且也可以嵌套:</span></span><br><span class="line">(<span class="name">+</span> <span class="number">2</span> (<span class="name">+</span> <span class="number">1</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 一个s式可以包含原子符号或者其他s式</span></span><br><span class="line"><span class="comment">;; 在上面的例子中，1和2是原子符号</span></span><br><span class="line"><span class="comment">;; (+ 2 (+ 1 1)) 和 (+ 1 1) 是s式.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 在 `lisp-interaction-mode&#x27; 中你可以计算s式.</span></span><br><span class="line"><span class="comment">;; 把光标移到闭括号后，之后按下ctrl+j（以后简写为&#x27;C-j&#x27;）</span></span><br><span class="line"></span><br><span class="line">(<span class="name">+</span> <span class="number">3</span> (<span class="name">+</span> <span class="number">1</span> <span class="number">2</span>))</span><br><span class="line"><span class="comment">;;           ^ 光标放到这里</span></span><br><span class="line"><span class="comment">;; 按下`C-j&#x27; 就会输出 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; `C-j&#x27; 会在buffer中插入当前运算的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 而`C-xC-e&#x27; 则会在emacs最底部显示结果，也就是被称作&quot;minibuffer&quot;的区域</span></span><br><span class="line"><span class="comment">;; 为了避免把我们的buffer填满无用的结果，我们以后会一直用`C-xC-e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; `setq&#x27; 可以将一个值赋给一个变量</span></span><br><span class="line">(<span class="name">setq</span> my-name <span class="string">&quot;Bastien&quot;</span>)</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 输出 &quot;Bastien&quot; (在 mini-buffer 中显示)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; `insert&#x27; 会在光标处插入字符串:</span></span><br><span class="line">(<span class="name">insert</span> <span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 输出 &quot;Hello!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 在这里我们只传给了insert一个参数&quot;Hello!&quot;, 但是</span></span><br><span class="line"><span class="comment">;; 我们也可以传给它更多的参数，比如2个：</span></span><br><span class="line"></span><br><span class="line">(<span class="name">insert</span> <span class="string">&quot;Hello&quot;</span> <span class="string">&quot; world!&quot;</span>)</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 输出 &quot;Hello world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 你也可以用变量名来代替字符串</span></span><br><span class="line">(<span class="name">insert</span> <span class="string">&quot;Hello, I am &quot;</span> my-name)</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 输出 &quot;Hello, I am Bastien&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 你可以把s式嵌入函数中</span></span><br><span class="line">(<span class="name">defun</span> hello () (<span class="name">insert</span> <span class="string">&quot;Hello, I am &quot;</span> my-name))</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 输出 hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 现在执行这个函数</span></span><br><span class="line">(<span class="name">hello</span>)</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 输出 Hello, I am Bastien</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 函数中空括号的意思是我们不需要接受任何参数</span></span><br><span class="line"><span class="comment">;; 但是我们不能一直总是用my-name这个变量</span></span><br><span class="line"><span class="comment">;; 所以我们现在使我们的函数接受一个叫做&quot;name&quot;的参数 </span></span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> hello (<span class="name">name</span>) (<span class="name">insert</span> <span class="string">&quot;Hello &quot;</span> name))</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 输出 hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 现在我们调用这个函数，并且将&quot;you&quot;作为参数传递</span></span><br><span class="line"></span><br><span class="line">(<span class="name">hello</span> <span class="string">&quot;you&quot;</span>)</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 输出 &quot;Hello you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 成功！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 现在我们可以休息一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 下面我们在新的窗口中新建一个名为 &quot;*test*&quot; 的buffer:</span></span><br><span class="line"></span><br><span class="line">(<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 这时屏幕上会显示两个窗口，而光标此时位于*test* buffer内</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 用鼠标单击上面的buffer就会使光标移回。</span></span><br><span class="line"><span class="comment">;; 或者你可以使用 `C-xo&#x27; 使得光标跳到另一个窗口中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 你可以用 `progn&#x27;命令将s式结合起来:</span></span><br><span class="line">(<span class="name">progn</span></span><br><span class="line">  (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">  (<span class="name">hello</span> <span class="string">&quot;you&quot;</span>))</span><br><span class="line"><span class="comment">;; `C-xC-e&#x27; 此时屏幕分为两个窗口，并且在*test* buffer中显示&quot;Hello you&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 现在为了简洁，我们需要在每个s式后面都使用`C-xC-e&#x27;来执行，后面就不再说明了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 记得可以用过鼠标或者`C-xo&#x27;回到*scratch*这个buffer。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 清除当前buffer也是常用操作之一：</span></span><br><span class="line">(<span class="name">progn</span></span><br><span class="line">  (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">  (<span class="name">erase-buffer</span>)</span><br><span class="line">  (<span class="name">hello</span> <span class="string">&quot;there&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 也可以回到其他的窗口中</span></span><br><span class="line">(<span class="name">progn</span></span><br><span class="line">  (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">  (<span class="name">erase-buffer</span>)</span><br><span class="line">  (<span class="name">hello</span> <span class="string">&quot;you&quot;</span>)</span><br><span class="line">  (<span class="name">other-window</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 你可以用 `let&#x27; 将一个值和一个局部变量绑定:</span></span><br><span class="line">(<span class="name">let</span> ((<span class="name">local-name</span> <span class="string">&quot;you&quot;</span>))</span><br><span class="line">  (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">  (<span class="name">erase-buffer</span>)</span><br><span class="line">  (<span class="name">hello</span> local-name)</span><br><span class="line">  (<span class="name">other-window</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 这里我们就不需要使用 `progn&#x27; 了， 因为 `let&#x27; 也可以将很多s式组合起来。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 格式化字符串的方法：</span></span><br><span class="line">(<span class="name">format</span> <span class="string">&quot;Hello %s!\n&quot;</span> <span class="string">&quot;visitor&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; %s 是字符串占位符，这里被&quot;visitor&quot;替代.</span></span><br><span class="line"><span class="comment">;; \n 是换行符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 现在我们用格式化的方法再重写一下我们的函数:</span></span><br><span class="line">(<span class="name">defun</span> hello (<span class="name">name</span>)</span><br><span class="line">  (<span class="name">insert</span> (<span class="name">format</span> <span class="string">&quot;Hello %s!\n&quot;</span> name)))</span><br><span class="line"></span><br><span class="line">(<span class="name">hello</span> <span class="string">&quot;you&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 我们再用`let&#x27;新建另一个函数:</span></span><br><span class="line">(<span class="name">defun</span> greeting (<span class="name">name</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">your-name</span> <span class="string">&quot;Bastien&quot;</span>))</span><br><span class="line">    (<span class="name">insert</span> (<span class="name">format</span> <span class="string">&quot;Hello %s!\n\nI am %s.&quot;</span></span><br><span class="line">                    name       <span class="comment">; the argument of the function</span></span><br><span class="line">                    your-name  <span class="comment">; the let-bound variable &quot;Bastien&quot;</span></span><br><span class="line">                    ))))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 之后执行:</span></span><br><span class="line">(<span class="name">greeting</span> <span class="string">&quot;you&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 有些函数可以和用户交互:</span></span><br><span class="line">(<span class="name">read-from-minibuffer</span> <span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 这个函数会返回在执行时用户输入的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 现在我们让`greeting&#x27;函数显示你的名字:</span></span><br><span class="line">(<span class="name">defun</span> greeting (<span class="name">from-name</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">your-name</span> (<span class="name">read-from-minibuffer</span> <span class="string">&quot;Enter your name: &quot;</span>)))</span><br><span class="line">    (<span class="name">insert</span> (<span class="name">format</span> <span class="string">&quot;Hello!\n\nI am %s and you are %s.&quot;</span></span><br><span class="line">                    from-name <span class="comment">; the argument of the function</span></span><br><span class="line">                    your-name <span class="comment">; the let-bound var, entered at prompt</span></span><br><span class="line">                    ))))</span><br><span class="line"></span><br><span class="line">(<span class="name">greeting</span> <span class="string">&quot;Bastien&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 我们让结果在另一个窗口中显示:</span></span><br><span class="line">(<span class="name">defun</span> greeting (<span class="name">from-name</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">your-name</span> (<span class="name">read-from-minibuffer</span> <span class="string">&quot;Enter your name: &quot;</span>)))</span><br><span class="line">    (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">    (<span class="name">erase-buffer</span>)</span><br><span class="line">    (<span class="name">insert</span> (<span class="name">format</span> <span class="string">&quot;Hello %s!\n\nI am %s.&quot;</span> your-name from-name))</span><br><span class="line">    (<span class="name">other-window</span> <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 测试一下：</span></span><br><span class="line">(<span class="name">greeting</span> <span class="string">&quot;Bastien&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 第二节结束，休息一下吧。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 我们将一些名字存到列表中：</span></span><br><span class="line">(<span class="name">setq</span> list-of-names &#x27;(<span class="string">&quot;Sarah&quot;</span> <span class="string">&quot;Chloe&quot;</span> <span class="string">&quot;Mathilde&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 用 `car&#x27;来取得第一个名字：</span></span><br><span class="line">(<span class="name">car</span> list-of-names)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 用 `cdr&#x27;取得剩下的名字:</span></span><br><span class="line">(<span class="name">cdr</span> list-of-names)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 用 `push&#x27;把名字添加到列表的开头:</span></span><br><span class="line">(<span class="name">push</span> <span class="string">&quot;Stephanie&quot;</span> list-of-names)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 注意: `car&#x27; 和 `cdr&#x27; 并不修改列表本身, 但是 `push&#x27; 却会对列表本身进行操作.</span></span><br><span class="line"><span class="comment">;; 这个区别是很重要的: 有些函数没有任何副作用（比如`car&#x27;）</span></span><br><span class="line"><span class="comment">;; 但还有一些却是有的 (比如 `push&#x27;).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 我们来对`list-of-names&#x27;列表中的每一个元素都使用hello函数:</span></span><br><span class="line">(<span class="name">mapcar</span> &#x27;hello list-of-names)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 将 `greeting&#x27; 改进，使的我们能够对`list-of-names&#x27;中的所有名字执行:</span></span><br><span class="line">(<span class="name">defun</span> greeting ()</span><br><span class="line">    (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">    (<span class="name">erase-buffer</span>)</span><br><span class="line">    (<span class="name">mapcar</span> &#x27;hello list-of-names)</span><br><span class="line">    (<span class="name">other-window</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">greeting</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 记得我们之前定义的 `hello&#x27; 函数吗？ 这个函数接受一个参数，名字。</span></span><br><span class="line"><span class="comment">;; `mapcar&#x27; 调用 `hello&#x27;, 并将`list-of-names&#x27;作为参数先后传给`hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 现在我们对显示的buffer中的内容进行一些更改：</span></span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> replace-hello-by-bonjour ()</span><br><span class="line">    (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">    (<span class="name">goto-char</span> (<span class="name">point-min</span>))</span><br><span class="line">    (<span class="name">while</span> (<span class="name">search-forward</span> <span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">      (<span class="name">replace-match</span> <span class="string">&quot;Bonjour&quot;</span>))</span><br><span class="line">    (<span class="name">other-window</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; (goto-char (point-min)) 将光标移到buffer的开始</span></span><br><span class="line"><span class="comment">;; (search-forward &quot;Hello&quot;) 查找字符串&quot;Hello&quot;</span></span><br><span class="line"><span class="comment">;; (while x y) 当x返回某个值时执行y这个s式</span></span><br><span class="line"><span class="comment">;; 当x返回`nil&#x27; (空), 退出循环</span></span><br><span class="line"></span><br><span class="line">(<span class="name">replace-hello-by-bonjour</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 你会看到所有在*test* buffer中出现的&quot;Hello&quot;字样都被换成了&quot;Bonjour&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 你也会得到以下错误提示: &quot;Search failed: Hello&quot;.</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 如果要避免这个错误, 你需要告诉 `search-forward&#x27; 这个命令是否在</span></span><br><span class="line"><span class="comment">;; buffer的某个地方停止查找, 并且在什么都没找到时是否应该不给出错误提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; (search-forward &quot;Hello&quot; nil t) 可以达到这个要求:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; `nil&#x27; 参数的意思是 : 查找并不限于某个范围内</span></span><br><span class="line"><span class="comment">;; `t&#x27; 参数的意思是: 当什么都没找到时，不给出错误提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 在下面的函数中，我们用到了s式，并且不给出任何错误提示:</span></span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> hello-to-bonjour ()</span><br><span class="line">    (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">    (<span class="name">erase-buffer</span>)</span><br><span class="line">    <span class="comment">;; 为`list-of-names&#x27;中的每个名字调用hello</span></span><br><span class="line">    (<span class="name">mapcar</span> &#x27;hello list-of-names)</span><br><span class="line">    (<span class="name">goto-char</span> (<span class="name">point-min</span>))</span><br><span class="line">    <span class="comment">;; 将&quot;Hello&quot; 替换为&quot;Bonjour&quot;</span></span><br><span class="line">    (<span class="name">while</span> (<span class="name">search-forward</span> <span class="string">&quot;Hello&quot;</span> <span class="literal">nil</span> <span class="literal">t</span>)</span><br><span class="line">      (<span class="name">replace-match</span> <span class="string">&quot;Bonjour&quot;</span>))</span><br><span class="line">    (<span class="name">other-window</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">hello-to-bonjour</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 给这些名字加粗:</span></span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> boldify-names ()</span><br><span class="line">    (<span class="name">switch-to-buffer-other-window</span> <span class="string">&quot;*test*&quot;</span>)</span><br><span class="line">    (<span class="name">goto-char</span> (<span class="name">point-min</span>))</span><br><span class="line">    (<span class="name">while</span> (<span class="name">re-search-forward</span> <span class="string">&quot;Bonjour \\(.+\\)!&quot;</span> <span class="literal">nil</span> <span class="literal">t</span>)</span><br><span class="line">      (<span class="name">add-text-properties</span> (<span class="name">match-beginning</span> <span class="number">1</span>)</span><br><span class="line">                           (<span class="name">match-end</span> <span class="number">1</span>)</span><br><span class="line">                           (<span class="name">list</span> &#x27;face &#x27;bold)))</span><br><span class="line">    (<span class="name">other-window</span> <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 这个函数使用了 `re-search-forward&#x27;:</span></span><br><span class="line"><span class="comment">;; 和查找一个字符串不同，你用这个命令可以查找一个模式，即正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 正则表达式 &quot;Bonjour \\(.+\\)!&quot; 的意思是:</span></span><br><span class="line"><span class="comment">;; 字符串 &quot;Bonjour &quot;, 之后跟着</span></span><br><span class="line"><span class="comment">;; 一组           |  \\( ... \\) 结构</span></span><br><span class="line"><span class="comment">;; 任意字符       |  . 的含义</span></span><br><span class="line"><span class="comment">;; 有可能重复的   |  + 的含义</span></span><br><span class="line"><span class="comment">;; 之后跟着 &quot;!&quot; 这个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 准备好了？试试看。</span></span><br><span class="line"></span><br><span class="line">(<span class="name">boldify-names</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; `add-text-properties&#x27; 可以添加文字属性, 比如文字样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 好的，我们成功了！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 如果你想对一个变量或者函数有更多的了解：</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; C-h v 变量 回车</span></span><br><span class="line"><span class="comment">;; C-h f 函数 回车</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 阅读Emacs Lisp官方文档:</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; C-h i m elisp 回车</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;; 在线阅读Emacs Lisp文档:</span></span><br><span class="line"><span class="comment">;; https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 感谢以下同学的建议和反馈:</span></span><br><span class="line"><span class="comment">;; - Wes Hardaker</span></span><br><span class="line"><span class="comment">;; - notbob</span></span><br><span class="line"><span class="comment">;; - Kevin Montuori</span></span><br><span class="line"><span class="comment">;; - Arne Babenhauserheide</span></span><br><span class="line"><span class="comment">;; - Alan Schmitt</span></span><br><span class="line"><span class="comment">;; - spacegoing</span></span><br></pre></td></tr></table></figure><h2 id="Spacemacs-Rocks-第二季"><a href="#Spacemacs-Rocks-第二季" class="headerlink" title="Spacemacs Rocks 第二季"></a><a href="http://book.emacs-china.org/">Spacemacs Rocks 第二季</a></h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;emacs-介绍&quot;&gt;&lt;a href=&quot;#emacs-介绍&quot; class=&quot;headerlink&quot; title=&quot;emacs 介绍&quot;&gt;&lt;/a&gt;emacs 介绍&lt;/h1&gt;</summary>
    
    
    
    
    <category term="lisp" scheme="https://60ke.github.io/old_blogs/tags/lisp/"/>
    
    <category term="emacs" scheme="https://60ke.github.io/old_blogs/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记</title>
    <link href="https://60ke.github.io/old_blogs/2021/09/27/linux%E7%AC%94%E8%AE%B0/"/>
    <id>https://60ke.github.io/old_blogs/2021/09/27/linux%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-27T15:44:36.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zsh-tmux"><a href="#zsh-tmux" class="headerlink" title="zsh tmux"></a>zsh tmux</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ta=<span class="string">&#x27;tmux attach -t&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> tad=<span class="string">&#x27;tmux attach -d -t&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ts=<span class="string">&#x27;tmux new-session -s&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> tl=<span class="string">&#x27;tmux list-sessions&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> tksv=<span class="string">&#x27;tmux kill-server&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> tkss=<span class="string">&#x27;tmux kill-session -t&#x27;</span></span><br></pre></td></tr></table></figure><p>spacevim</p><p>\y 复制到系统粘贴板<br>spc f v d 打开配置文件<br>spc b n 切换到下一个buffer</p><h1 id="set-a"><a href="#set-a" class="headerlink" title="set -a"></a>set -a</h1><p>set -a 全称为:allexport <code>set -a</code>指从设置开始标记所有新的和修改过的用于输出的变量 Take away: Yes, set +a unsets set -a but variables do not become un exported because of that. Each variable then needs to be un exported or unset.<br><code>set +a</code>可取消<code>set -a</code>的设置<br><code>. env.sh</code> is short for <code>source env.sh</code></p><p>以上是关于<code>set -a</code>的解释，但是仅从字面上的解释，还是不知道其作用。<br>其实<code>set -a</code>本质为从当前标记将shell变量导出至环境变量，下面用代码来说明其具体作用。<br>首先运行<code>set</code>命令，可查看当前shell变量<br><img src="https://gitee.com/worileqing/upic/raw/master/uPic/yUpf0z.png" alt="yUpf0z"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set |grep TEST</span><br><span class="line">env |grep TEST</span><br><span class="line">TEST&#x3D;123</span><br><span class="line">set |grep TEST</span><br><span class="line">env |grep TEST</span><br><span class="line">set -a</span><br><span class="line">TEST&#x3D;123</span><br><span class="line">env |grep TEST</span><br></pre></td></tr></table></figure><p>运行上述代码即可验证</p><h1 id="Git-add-and-commit-in-one-command"><a href="#Git-add-and-commit-in-one-command" class="headerlink" title="Git add and commit in one command"></a>Git add and commit in one command</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.add-commit <span class="string">&#x27;!git add -A &amp;&amp; git commit&#x27;</span></span><br><span class="line">git commit -am <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure><h1 id="shell-特殊变量列表"><a href="#shell-特殊变量列表" class="headerlink" title="shell 特殊变量列表"></a>shell 特殊变量列表</h1><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>当前脚本的文件名</td></tr><tr><td>$n</td><td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</td></tr><tr><td>$#</td><td>传递给脚本或函数的参数个数。</td></tr><tr><td>$*</td><td>传递给脚本或函数的所有参数。</td></tr><tr><td>$@</td><td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同，下面将会讲到。</td></tr><tr><td>$?</td><td>上个命令的退出状态，或函数的返回值。</td></tr><tr><td>$$</td><td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table><h1 id="kill-0"><a href="#kill-0" class="headerlink" title="kill -0"></a>kill -0</h1><p><code>kill -0 pid</code> 不发送任何信号，但是系统会进行错误检查。<br>所以经常用来检查一个进程是否存在，存在返回0；不存在返回1</p><p>代码示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pid=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ERROR: Process ID not specified.&quot;</span></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="subst">$(basename <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span> &lt;PID&gt;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check if process exists</span></span><br><span class="line"><span class="built_in">kill</span> -0 <span class="variable">$pid</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">pid_exist=$?</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;zsh-tmux&quot;&gt;&lt;a href=&quot;#zsh-tmux&quot; class=&quot;headerlink&quot; title=&quot;zsh tmux&quot;&gt;&lt;/a&gt;zsh tmux&lt;/h1&gt;</summary>
    
    
    
    
    <category term="emacs" scheme="https://60ke.github.io/old_blogs/tags/emacs/"/>
    
    <category term="linux" scheme="https://60ke.github.io/old_blogs/tags/linux/"/>
    
    <category term="shell" scheme="https://60ke.github.io/old_blogs/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>go语言圣经8.5--goroutine解惑</title>
    <link href="https://60ke.github.io/old_blogs/2021/08/10/go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F8-5-goroutine%E8%A7%A3%E6%83%91/"/>
    <id>https://60ke.github.io/old_blogs/2021/08/10/go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F8-5-goroutine%E8%A7%A3%E6%83%91/</id>
    <published>2021-08-10T18:21:51.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<p>test<br>下面的代码是修改过的,中文版的go程序设计语言,8.5并行循环的最后一个示例:<br>代码虽有修改,但是只改变了并发的功能,并发的逻辑与源码没什么区别</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">sizes := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int64</span>)</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;send size 11&quot;</span>)</span><br><span class="line">sizes &lt;- <span class="number">11</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">t := i</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(t <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;send size: %d\n&quot;</span>, t)</span><br><span class="line">sizes &lt;- <span class="keyword">int64</span>(t)</span><br><span class="line">&#125;(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;waiting for all goroutine &quot;</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Wait()</span><br><span class="line">time.Sleep(time.Second * <span class="number">4</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;wg done&quot;</span>)</span><br><span class="line"><span class="comment">// close(sizes)</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">8</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;time sleep 8s&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// wg.Wait()</span></span><br><span class="line">fmt.Println(<span class="string">&quot;All goroutines finished!&quot;</span>)</span><br><span class="line"><span class="comment">// fmt.Println(&lt;-sizes)</span></span><br><span class="line"><span class="comment">// time.Sleep(time.Second * 3)</span></span><br><span class="line"><span class="keyword">var</span> total <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">for</span> size := <span class="keyword">range</span> sizes &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;get size:&quot;</span>, size)</span><br><span class="line">total += size</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// close(sizes)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中文版关于这段的代码的描述是:</p><blockquote><p>注意Add和Done方法的不对称性。Add递增计数器，它必须在工作goroutine开始之前执行，而不是在中间。另一方面，不能保证Add在关闭者goroutine调用Wait之前发生。另外，Add有一个参数，但Done没有，它等价于Add(-1)。使用defer来确保在发送错误的情况下计数器可以递减。使用defer来确保在发送错误的情况下计数器可以递减。在不知道迭代次数的情况下，上面的代码结构是通用的，符合习惯的并行循环模式。</p></blockquote><blockquote><p>sizes通道将每一个文件的大小带回主goroutine，它使用range循环进行接收然后计算总和。注意，在关闭者goroutine中，在关闭sizes通道之前,等待所有的工作者结束。这里两个操作（等待和关闭）必须在sizes通道上面的迭代并行执行。考虑替代方案：如果我们将等待操作放在循环之前的主goroutine中，因为通道会满，它将永不结束；如果放在循环后面，它将不可达，因为没有任何东西可用来关闭通道，循环可能永不结束。</p></blockquote><p>不得不承认，这个代码的中文描述的前三句话就给我整懵了:<code>注意Add和Done方法的不对称性。Add递增计数器，它必须在工作goroutine开始之前执行，而不是在中间。另一方面，不能保证Add在关闭者goroutine调用Wait之前发生。</code>第一句话很容易理解：因为<code>Add</code>函数是在<code>main</code>函数里面的,而<code>Done</code>函数是在goroutine中的（不是都在<code>main</code>中或都在<code>goroutine</code>中），所以它们是不对称的。接着看第二句：前半句<code>Add递增计数器</code>指的是<code>wg.Add(1)</code>，这个就是字面意思，是说这个操作会将<code>wg+1</code>,后面<code>它必须在工作goroutine开始之前执行，而不是在中间。</code>就开始不将人话了(词汇有限，没有侮辱的意思)。盲猜这个话的意思应该是：<code>Add操作，需要在其后面的代码</code>:<code>go func()&#123;...&#125;</code>之前执行，而不是放在<code>go func()&#123;这里（即中间）&#125;</code>执行，既然是盲猜，那还得接着看才好验证：<code>另一方面，不能保证Add在关闭者goroutine调用Wait之前发生。</code>另一方面，另一方面呃呃呃，关闭者goroutine应该是那个含有<code>wg.Wait()</code>的goroutine，不能保证Add函数在其之前发生是什么意思：<code>合着这个代码可能还没运行Add就运行了Wait呗</code>，那这段代码的意义何在！！！！！</p><p>然后就有了上面的代码实测，搞了一下午终于弄明白了，这话说错了，对我产生了误导，很大的误导。<br>先不说代码的证明，先看看英文版原书是怎么描述的吧:</p><blockquote><p>Note the asymmetry in the Add and Done methods. Add, which increments the counter, must be called before the worker goroutine starts, not within it; otherwise we would not be sure that theAddhappensbeforethe‘‘closer’’goroutinecallsWait. Also,Addtakesaparameter,but Done does not; it’s equivalent to Add(-1). We use defer to ensure that the counter is decremented even in the error case. The structure of the code above is a common and idiomatic pattern for looping in parallel when we don’t know the number of iterations.<br>The sizes channel carries each file size back to the main goroutine, which receives them using a range loop and computes the sum. Observe how we create a closer goroutine that waits for the workers to finish before closing the sizes channel. These two operations, wait and close, must be concurrent with the loop over sizes. Consider the alternatives: if the wait operation were placed in the main goroutine before the loop, it would never end, and if placed after the loop, it would be unreachable since with nothing closing the channel, the loop would never terminate.</p></blockquote><p>好家伙，原来我看见的中文版的三句话是两句：<code>Note the asymmetry in the Add and Done methods. Add, which increments the counter, must be called before the worker goroutine starts, not within it; otherwise we would not be sure that theAddhappensbeforethe‘‘closer’’goroutinecallsWait. </code>看了英文我突然觉得英文版的比中文还好理解，且不说那个<code>工作goroutine</code>跟个机翻似的，也不说那个<code>within it</code>被他翻译成了<code>在中间</code>,最过分的是英文这里的分号<code>;</code>,中文给来了个句号，<code>otherwise</code>被他翻译成了<code>另一方面</code>，直接把意思给弄反。我来用我拙劣的言语把第二句给个中文翻译吧:<code>Add操作是将计数器wg递增，它必须运行在将要运行的goroutine(这里为包含有wg.Done的goroutine)之外，因为（不运行在之外的话）就无法保证Add在Wait之前运行了</code>。也就是说这个Add函数现在的位置恰恰就是为了保证Add在Wait之前运行的！！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;test&lt;br&gt;下面的代码是修改过的,中文版的go程序设计语言,8.5并行循环的最后一个示例:&lt;br&gt;代码虽有修改,但是只改变了并发的功能,并发的逻辑与源码没什么区别&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://60ke.github.io/old_blogs/tags/golang/"/>
    
    <category term="并发编程" scheme="https://60ke.github.io/old_blogs/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>write a antlr4 visitor with golang</title>
    <link href="https://60ke.github.io/old_blogs/2021/05/11/antlr4/"/>
    <id>https://60ke.github.io/old_blogs/2021/05/11/antlr4/</id>
    <published>2021-05-11T18:29:58.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<p>ANTLR（全名：ANother Tool for Language Recognition）是基于LL(*)算法实现的语法解析器生成器（parser generator），用Java语言编写，使用自上而下（top-down）的递归下降LL剖析器方法。由旧金山大学的Terence Parr博士等人于1989年开始发展。<br>目前网上的antlr示例大多为java,python,c++等,其github上虽有关于go的一个文档:<a href="https://github.com/antlr/antlr4/blob/master/doc/go-target.md">go-target.md</a>,但是是基于listener模式实现的,而本文是基于visitor实现的一个简单计算器</p><h2 id="install-antlr"><a href="#install-antlr" class="headerlink" title="install antlr"></a>install antlr</h2><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><p>antlr是基于Java开发的的,其运行依赖java环境。<br>当前(2021年05月11日18:39:11) mac可使用<code>homebrew</code>命令<code>brew install openjdk</code>但是M1的openjdk兼容性有问题,使用antlr生成<code>AST</code>树的图片时总会异常退出,最终选择使用<a href="https://cdn.azul.com/zulu/bin/zulu16.30.15-ca-jdk16.0.1-macosx_aarch64.dmg">Azul Zulu的dmg二进制安装</a>可正常运行</p><h3 id="安装antlr"><a href="#安装antlr" class="headerlink" title="安装antlr"></a>安装antlr</h3><p><a href="https://www.antlr.org/">antlr官网</a>首页已经给出了安装教程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OS X</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib</span><br><span class="line">$ sudo curl -O https://www.antlr.org/download/antlr-4.9.2-complete.jar</span><br><span class="line">$ <span class="built_in">export</span> CLASSPATH=<span class="string">&quot;.:/usr/local/lib/antlr-4.9.2-complete.jar:<span class="variable">$CLASSPATH</span>&quot;</span></span><br><span class="line">$ <span class="built_in">alias</span> antlr4=<span class="string">&#x27;java -jar /usr/local/lib/antlr-4.9.2-complete.jar&#x27;</span></span><br><span class="line">$ <span class="built_in">alias</span> grun=<span class="string">&#x27;java org.antlr.v4.gui.TestRig&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="运行示例测试"><a href="#运行示例测试" class="headerlink" title="运行示例测试"></a>运行示例测试</h3><ul><li>编写Expr.g4  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grammar Expr;</span><br><span class="line">prog:(expr NEWLINE)* ;</span><br><span class="line">expr:expr (&#39;*&#39;|&#39;&#x2F;&#39;) expr</span><br><span class="line">    |expr (&#39;+&#39;|&#39;-&#39;) expr</span><br><span class="line">    |INT</span><br><span class="line">    |&#39;(&#39; expr &#39;)&#39;</span><br><span class="line">    ;</span><br><span class="line">NEWLINE : [\r\n]+ ;</span><br><span class="line">INT     : [0-9]+ ;</span><br></pre></td></tr></table></figure></li><li>运行antlr工具  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ antlr4 Expr.g4</span><br><span class="line">$ javac Expr*.java</span><br><span class="line">$ grun Expr prog -gui</span><br><span class="line">100+2*34</span><br></pre></td></tr></table></figure>  <code>ctrl + d</code>看到<code>AST</code>图片<br>  <img src="https://gitee.com/worileqing/upic/raw/master/uPic/G6vRb4.png" alt="G6vRb4">,说明我们antlr安装成功且可以正常运行。</li></ul><h2 id="golang-visitor实现"><a href="#golang-visitor实现" class="headerlink" title="golang visitor实现"></a>golang visitor实现</h2><h3 id="antlr-grammar文件编写"><a href="#antlr-grammar文件编写" class="headerlink" title="antlr grammar文件编写"></a>antlr grammar文件编写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">grammar Calculantlr;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; non-terminals expressed as context-free grammar (BNF)</span><br><span class="line">expr:left&#x3D;expr op&#x3D;(&#39;*&#39;|&#39;&#x2F;&#39;) right&#x3D;expr  # OpExpr</span><br><span class="line">    |left&#x3D;expr op&#x3D;(&#39;+&#39;|&#39;-&#39;) right&#x3D;expr  # OpExpr</span><br><span class="line">    |atom&#x3D;INT                           # AtomExpr</span><br><span class="line">    |&#39;(&#39; expr &#39;)&#39;                       # ParenExpr</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; tokens expressed as regular expressions</span><br><span class="line">INT : [0-9]+ ;</span><br><span class="line">WS  :   [ \t]+ -&gt; skip ;</span><br></pre></td></tr></table></figure><h3 id="使用antlr生成相关的go文件"><a href="#使用antlr生成相关的go文件" class="headerlink" title="使用antlr生成相关的go文件"></a>使用antlr生成相关的go文件</h3><p><code>antlr4 -Dlanguage=Go -o parser -package parser -visitor -no-listener Expression.g4</code><br>上面的命令参数作用一目了然不在赘述,需要注意的是antlr默认会生成listenner模式的相关文件,所以我们使用了<code>-no-listener</code>参数阻止</p><h3 id="编写go的main程序"><a href="#编写go的main程序" class="headerlink" title="编写go的main程序"></a>编写go的<code>main</code>程序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;antlrtest/parser&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/antlr/antlr4/runtime/Go/antlr&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Visitor <span class="keyword">struct</span> &#123;</span><br><span class="line">parser.CalculantlrVisitor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Visitor)</span> <span class="title">Visit</span><span class="params">(tree antlr.ParseTree)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> val := tree.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *parser.AtomExprContext:</span><br><span class="line"><span class="keyword">return</span> v.VisitAtomExpr(val)</span><br><span class="line"><span class="keyword">case</span> *parser.ParenExprContext:</span><br><span class="line"><span class="keyword">return</span> v.VisitParenExpr(val)</span><br><span class="line"><span class="keyword">case</span> *parser.OpExprContext:</span><br><span class="line"><span class="keyword">return</span> v.VisitOpExpr(val)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Unknown context&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Visitor)</span> <span class="title">VisitAtomExpr</span><span class="params">(ctx *parser.AtomExprContext)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;atom&quot;</span>, ctx.GetText())</span><br><span class="line">i1, _ := strconv.ParseFloat(ctx.GetText(), <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Visitor)</span> <span class="title">VisitParenExpr</span><span class="params">(ctx *parser.ParenExprContext)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;parent&quot;</span>, ctx.GetText())</span><br><span class="line">tar := v.Visit(ctx.Expr())</span><br><span class="line"><span class="keyword">return</span> tar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Visitor)</span> <span class="title">VisitOpExpr</span><span class="params">(ctx *parser.OpExprContext)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="comment">// fmt.Println(&quot;op&quot;)</span></span><br><span class="line">l := v.Visit(ctx.GetLeft())</span><br><span class="line">r := v.Visit(ctx.GetRight())</span><br><span class="line">op := ctx.GetOp().GetText()</span><br><span class="line"><span class="comment">// if op == &quot;+&quot; &#123;</span></span><br><span class="line"><span class="comment">// return l + r</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;op&quot;</span>, op)</span><br><span class="line"><span class="keyword">switch</span> op &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> l + r</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> l - r</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> l * r</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> l / r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func (this *TreeShapeListener) EnterEveryRule(ctx antlr.ParserRuleContext) &#123;</span></span><br><span class="line"><span class="comment">// fmt.Println(ctx.GetText())</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">expression := <span class="string">&quot;100 + 3 * 4 + 5&quot;</span></span><br><span class="line"><span class="comment">// input, _ := antlr.NewFileStream(os.Args[1])</span></span><br><span class="line">input := antlr.NewInputStream(expression)</span><br><span class="line"></span><br><span class="line">lexer := parser.NewCalculantlrLexer(input)</span><br><span class="line"></span><br><span class="line">stream := antlr.NewCommonTokenStream(lexer, <span class="number">0</span>)</span><br><span class="line">p := parser.NewCalculantlrParser(stream)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p.AddErrorListener(antlr.NewDiagnosticErrorListener(true))</span></span><br><span class="line">p.BuildParseTrees = <span class="literal">true</span></span><br><span class="line">tree := p.Expr()</span><br><span class="line"><span class="keyword">var</span> visitor = Visitor&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> result = visitor.Visit(tree)</span><br><span class="line">fmt.Println(expression, <span class="string">&quot;=&quot;</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其它关于go的mod的一些基础操作这里不提,运行<code>go run test.go</code>可以看到以下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">atom 100</span><br><span class="line">atom 3</span><br><span class="line">atom 4</span><br><span class="line">op *</span><br><span class="line">op +</span><br><span class="line">atom 5</span><br><span class="line">op +</span><br><span class="line">100 + 3 * 4 + 5 &#x3D; 117</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ANTLR（全名：ANother Tool for Language Recognition）是基于LL(*)算法实现的语法解析器生成器（parser generator），用Java语言编写，使用自上而下（top-down）的递归下降LL剖析器方法。由旧金山大学的Terence Parr博士等人于1989年开始发展。&lt;br&gt;目前网上的antlr示例大多为java,python,c++等,其github上虽有关于go的一个文档:&lt;a href=&quot;https://github.com/antlr/antlr4/blob/master/doc/go-target.md&quot;&gt;go-target.md&lt;/a&gt;,但是是基于listener模式实现的,而本文是基于visitor实现的一个简单计算器&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://60ke.github.io/old_blogs/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>python解释器初探</title>
    <link href="https://60ke.github.io/old_blogs/2021/04/29/python%E8%A7%A3%E9%87%8A%E5%99%A8%E5%88%9D%E6%8E%A2/"/>
    <id>https://60ke.github.io/old_blogs/2021/04/29/python%E8%A7%A3%E9%87%8A%E5%99%A8%E5%88%9D%E6%8E%A2/</id>
    <published>2021-04-29T17:13:58.000Z</published>
    <updated>2022-04-09T04:00:43.690Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-解释器概念"><a href="#1-解释器概念" class="headerlink" title="1.解释器概念"></a>1.解释器概念</h2><h3 id="1-1先看wiki中的定义"><a href="#1-1先看wiki中的定义" class="headerlink" title="1.1先看wiki中的定义:"></a>1.1先看wiki中的定义:</h3><p><em>In computer science, an interpreter is a computer program that directly executes instructions written in a programming or scripting language, without requiring them previously to have been compiled into a machine language program.</em></p><p>大意为:*解释器是一种可以执行无需编译为机器码的脚步或程序语言的计算机程序.*如果执行的程序由虚拟机器语言或类似于机器语言的程序设计语言写成,解释器也可被称作虚拟机。<br>与解释器对应还有编译器.编译器（compiler）是一种计算机程序，它会将某种编程语言写成的源代码（原始语言）转换成另一种编程语言（目标语言）。通常会将源代码编译为机器语言。<br>其实解释器编译器并没有一个标准的定义,随着计算机科学发发展他们之间的界限变得模糊。</p><h3 id="1-2解释器种类"><a href="#1-2解释器种类" class="headerlink" title="1.2解释器种类"></a>1.2解释器种类</h3><p>按照解释器执行程序的方法可将解释器分为以下三类:<br>1.直接执行高级语言(如shell内置的编译器)<br>2.转换高级编程语言到更有效率的字节码（Bytecode），并执行字节码(如:Python,Ruby,Perl,MATLAB)<br>3.用解释器包含的编译器对高级语言进行编译，并指示中央处理器执行编译后的程序（如：JIT）</p><h3 id="1-3解释器的优缺点"><a href="#1-3解释器的优缺点" class="headerlink" title="1.3解释器的优缺点"></a>1.3解释器的优缺点</h3><p>以下为与编译器的对比:<br>####1.3.1 优点<br>由于解释器是边解释边执行的,这就使得它具备动态优化,可以边运行边调试易于debug,开发效率高,跨平台<br>####1.3.2 缺点<br>同样由于解释器边解释边执行的运行过程,导致其内存占用高,因为解释器需要保存更多程序的信息，运行时,同时其运行的本质是由运行时运行的,而运行时又是运行在物理机(虚拟机)之上,所以其运行时间也会加长。</p><h2 id="2简单的解释器实现"><a href="#2简单的解释器实现" class="headerlink" title="2简单的解释器实现"></a>2简单的解释器实现</h2><h3 id="2-1-大体流程"><a href="#2-1-大体流程" class="headerlink" title="2.1 大体流程"></a>2.1 大体流程</h3><p>我们要构造的解释器运行流程如下:<br>解析器加载待执行的指令,然后对指令进行解析、执行最终返回执行的结果<br><img src="https://gitee.com/worileqing/upic/raw/master/uPic/interpreter.png" alt="interpreter"></p><h3 id="2-2-构造执行场景"><a href="#2-2-构造执行场景" class="headerlink" title="2.2 构造执行场景"></a>2.2 构造执行场景</h3><p>现有变量<code>a</code>和<code>b</code>值分别为<code>2</code>和<code>3</code>当我们输入<code>a+b</code>时通过解释器解析执行并返回输出的结果,我们</p><h3 id="2-2-python代码实现"><a href="#2-2-python代码实现" class="headerlink" title="2.2 python代码实现"></a>2.2 python代码实现</h3><p>先构造待执行的指令集:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">to_exec = &#123;</span><br><span class="line">    <span class="string">&quot;instructions&quot;</span>: [</span><br><span class="line">        (<span class="string">&quot;LOAD_VALUE&quot;</span>, <span class="number">0</span>),</span><br><span class="line">        (<span class="string">&quot;STORE_NAME&quot;</span>,<span class="number">0</span>),</span><br><span class="line">        (<span class="string">&quot;LOAD_VALUE&quot;</span>,<span class="number">1</span>),</span><br><span class="line">        (<span class="string">&quot;STORE_NAME&quot;</span>,<span class="number">1</span>),</span><br><span class="line">        (<span class="string">&quot;LOAD_NAME&quot;</span>,<span class="number">0</span>),</span><br><span class="line">        (<span class="string">&quot;LOAD_NAME&quot;</span>,<span class="number">1</span>),</span><br><span class="line">        (<span class="string">&quot;ADD_TWO_VALUES&quot;</span>, <span class="literal">None</span>),</span><br><span class="line">        (<span class="string">&quot;PRINT_ANSWER&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    ],                    <span class="comment">#指令集</span></span><br><span class="line">    <span class="string">&quot;numbers&quot;</span>: [<span class="number">2</span>, <span class="number">3</span>],    <span class="comment">#值</span></span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>]    <span class="comment">#变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>to_exec </p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;1-解释器概念&quot;&gt;&lt;a href=&quot;#1-解释器概念&quot; class=&quot;headerlink&quot; title=&quot;1.解释器概念&quot;&gt;&lt;/a&gt;1.解释器概念&lt;/h2&gt;&lt;h3 id=&quot;1-1先看wiki中的定义&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="python" scheme="https://60ke.github.io/old_blogs/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>终端录屏</title>
    <link href="https://60ke.github.io/old_blogs/2021/04/29/%E7%BB%88%E7%AB%AF%E5%BD%95%E5%B1%8F/"/>
    <id>https://60ke.github.io/old_blogs/2021/04/29/%E7%BB%88%E7%AB%AF%E5%BD%95%E5%B1%8F/</id>
    <published>2021-04-29T10:09:56.000Z</published>
    <updated>2022-04-09T04:00:43.690Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然看到一个书签<code>http://showterm.io</code>,<code>showterm</code>是一个终端录屏工具但是现在,感觉用的人不多了,除了<code>showterm</code>以外还有<a href="https://github.com/icholy/ttygif">ttygif</a>,<a href="https://github.com/faressoft/terminalizer">terminalizer</a>,<a href="https://github.com/asciinema/asciinema">asciinema</a></p><h2 id="ttygif"><a href="#ttygif" class="headerlink" title="ttygif"></a>ttygif</h2><p><code>C</code>开发的录屏工具,mac下使用<code>brew install ttygif</code>即可安装</p><ul><li><p>录制</p><p>ttyrec + 自定义的录制名</p></li><li><p>保存<br>ttygif + <code>自定义的录制名</code> (-s 可设定倍速)</p></li><li><p>效果示意<br><img src="https://i.loli.net/2021/04/29/tQY7A2rhTNfmMqX.gif" alt="tQY7A2rhTNfmMqX"><br>本来有个13M的比较全的录屏但是gitee只支持1M文件的非登录可见,同时需要注意的是录屏录取的是整个终端,而不是当前的标签页(录屏过程切换其它标签,则切换后的标签的显示内容也会被录下)</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天突然看到一个书签&lt;code&gt;http://showterm.io&lt;/code&gt;,&lt;code&gt;showterm&lt;/code&gt;是一个终端录屏工具但是现在,感觉用的人不多了,除了&lt;code&gt;showterm&lt;/code&gt;以外还有&lt;a href=&quot;https://github.com/icholy/ttygif&quot;&gt;ttygif&lt;/a&gt;,&lt;a href=&quot;https://github.com/faressoft/terminalizer&quot;&gt;terminalizer&lt;/a&gt;,&lt;a href=&quot;https://github.com/asciinema/asciinema&quot;&gt;asciinema&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="shell" scheme="https://60ke.github.io/old_blogs/categories/shell/"/>
    
    
    <category term="shell" scheme="https://60ke.github.io/old_blogs/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之子字符串查找</title>
    <link href="https://60ke.github.io/old_blogs/2021/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/"/>
    <id>https://60ke.github.io/old_blogs/2021/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</id>
    <published>2021-04-16T16:48:01.000Z</published>
    <updated>2022-04-09T04:00:43.690Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个查找 substring 的函数。如果在母串中找到了子串，返回子串在母串中出现的下标，如果没有找到，返回 -1，如果子串是空串，则返回 0 。</p><p>go语言可以用<code>strings</code>直接实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Index(haystack, needle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>strings</code>中的index是Rabin–Karp算法实现的<br>实现同样的功能的算法还有<br>sunday算法</p><p>kmp算法</p><p>相关链接:<a href="https://segmentfault.com/a/1190000016554961">https://segmentfault.com/a/1190000016554961</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现一个查找 substring 的函数。如果在母串中找到了子串，返回子串在母串中出现的下标，如果没有找到，返回 -1，如果子串是空串，则返回 0 。&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="https://60ke.github.io/old_blogs/categories/go/"/>
    
    
    <category term="go" scheme="https://60ke.github.io/old_blogs/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go调用RUST</title>
    <link href="https://60ke.github.io/old_blogs/2021/04/06/go%E8%B0%83%E7%94%A8RUST/"/>
    <id>https://60ke.github.io/old_blogs/2021/04/06/go%E8%B0%83%E7%94%A8RUST/</id>
    <published>2021-04-06T10:46:59.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无参函数调用"><a href="#无参函数调用" class="headerlink" title="无参函数调用"></a>无参函数调用</h2><p>先写一个rust的lib项目生成动态库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new --lib embed</span><br></pre></td></tr></table></figure><ul><li>Cargo.toml<figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;k &lt;2589788697@qq.com&gt;&quot;</span>]</span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[lib]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="attr">crate-type</span> = [<span class="string">&quot;dylib&quot;</span>]</span><br></pre></td></tr></table></figure></li><li>lib.rs<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">process</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> handles:<span class="built_in">Vec</span>&lt;_&gt;=(<span class="number">0</span>..=<span class="number">10</span>).map(|_|&#123;</span><br><span class="line">        thread::spawn(||&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5000000</span>&#123;</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            x</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).collect();</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> handles&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;thread finished with count=&#123;&#125;&quot;</span>,h.join().map_err(|_|<span class="string">&quot;could not join a thread&quot;</span>).unwrap());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译<br>运行 <code>cargo build --release</code>得到<code>libembed.dylib</code></li></ul><p>将文件按照如下放置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── Cargo.lock</span><br><span class="line">├── Cargo.toml</span><br><span class="line">├── src</span><br><span class="line">│   ├── a.out</span><br><span class="line">│   ├── interface.h</span><br><span class="line">│   ├── lib.rs</span><br><span class="line">│   ├── libembed.dylib</span><br><span class="line">│   ├── main.c</span><br><span class="line">│   └── test.go</span><br></pre></td></tr></table></figure><ul><li>interface.h<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>main.c<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;interface.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    process();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译运行C<br><code>gcc main.c -L. -lembed &amp;&amp; ./a.out</code><br>PS:linux下编译<code>gcc main.c -L. -lembed -Wl,-rpath=./</code><br><code>-Wl,-rpath=./</code>用于指定程序运行寻找库的路径<br>运行结果<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br></pre></td></tr></table></figure></li><li>test.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#cgo LDFLAGS: -L./ -lembed</span></span><br><span class="line"><span class="comment">#include &quot;interface.h&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">C.process()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><code>go run test.go</code>结果与C运行一致</li></ul><h2 id="有参函数调用"><a href="#有参函数调用" class="headerlink" title="有参函数调用"></a>有参函数调用</h2><ul><li>lib.rs<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[repr(C)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    a:<span class="built_in">u32</span>,</span><br><span class="line">    b:<span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">process</span></span>(test:*<span class="keyword">const</span> Test)&#123;</span><br><span class="line">    <span class="keyword">unsafe</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,(*test).a);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,(*test).b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>cargo build --release --out-dir . -Z unstable-options</code></li><li>main.c<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(struct Test *test)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Test</span> <span class="title">test</span> =</span> &#123;<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    process(&amp;test);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>gcc main.c -L. -lembed -Wl,-rpath=./ &amp;&amp; ./a.out</code></li></ul><p>output</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><ul><li><p>interface.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125; Test;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(struct Test *test)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#cgo LDFLAGS: -L./ -lembed -Wl,-rpath=./</span></span><br><span class="line"><span class="comment">#include &quot;interface.h&quot; //非标准c头文件，所以用引号</span></span><br><span class="line"><span class="comment">typedef struct Test</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a;</span></span><br><span class="line"><span class="comment">    int b;</span></span><br><span class="line"><span class="comment">&#125; Test; #可以放但是不建议(建议放入interface.h)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test := C.Test&#123;a: <span class="number">3</span>, b: <span class="number">4</span>&#125;</span><br><span class="line">C.process(&amp;test)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串指针返回"><a href="#字符串指针返回" class="headerlink" title="字符串指针返回"></a>字符串指针返回</h2><p>很多数据结构在跨语言调用,得在各个语言来回解析,比较麻烦,我们直接以json字符串传递解析可以极大的简化问题的处理</p></li><li><p>lib.rs</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> libc::c_int;</span><br><span class="line"><span class="keyword">use</span> libc::c_char;</span><br><span class="line"><span class="keyword">use</span> std::ffi::&#123;CStr,CString&#125;;</span><br><span class="line"><span class="keyword">use</span> json;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">process</span></span>(a:c_int)&#123;</span><br><span class="line">    <span class="keyword">let</span> handles:<span class="built_in">Vec</span>&lt;_&gt;=(<span class="number">0</span>..=<span class="number">10</span>).map(|_|&#123;</span><br><span class="line">        thread::spawn(||&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5000000</span>&#123;</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            x</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).collect();</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> handles&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;thread finished with count=&#123;&#125;&quot;</span>,h.join().map_err(|_|<span class="string">&quot;could not join a thread&quot;</span>).unwrap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; have done&quot;</span>,a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">json_parse</span></span>(c_buf:*<span class="keyword">const</span> c_char)-&gt; *<span class="keyword">const</span> c_char&#123;</span><br><span class="line">    <span class="keyword">let</span> c_str = <span class="keyword">unsafe</span> &#123; CStr::from_ptr(c_buf) &#125;.to_str().unwrap();</span><br><span class="line">    <span class="keyword">let</span> parsed = json::parse(c_str).unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,parsed[<span class="string">&quot;a&quot;</span>]);</span><br><span class="line">    <span class="keyword">let</span> data = r#<span class="string">&quot;</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>name<span class="string">&quot;: &quot;</span>John Doe<span class="string">&quot;,</span></span><br><span class="line"><span class="string">            &quot;</span>age<span class="string">&quot;: 43,</span></span><br><span class="line"><span class="string">            &quot;</span>phones<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">                &quot;</span>+<span class="number">44</span> <span class="number">1234567</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">                &quot;</span>+<span class="number">44</span> <span class="number">2345678</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;&quot;</span>#;</span><br><span class="line">        CString::new(data).unwrap().into_raw()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;interface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    process(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str = <span class="string">&quot;&#123;\&quot;a\&quot;: 3&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ret_str = json_parse(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ret_str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>interface.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">json_parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *c_buf)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>test.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#cgo LDFLAGS: -L./ -lembed</span></span><br><span class="line"><span class="comment">#include &quot;interface.h&quot; //非标准c头文件，所以用引号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">C.process(C.<span class="keyword">int</span>(<span class="number">3</span>))</span><br><span class="line">ret_ptr := C.json_parse(C.CString(<span class="string">`&#123;&quot;a&quot;:3&#125;`</span>))</span><br><span class="line">fmt.Println(C.GoString(ret_ptr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;无参函数调用&quot;&gt;&lt;a href=&quot;#无参函数调用&quot; class=&quot;headerlink&quot; title=&quot;无参函数调用&quot;&gt;&lt;/a&gt;无参函数调用&lt;/h2&gt;</summary>
    
    
    
    <category term="go" scheme="https://60ke.github.io/old_blogs/categories/go/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/old_blogs/tags/rust/"/>
    
    <category term="go" scheme="https://60ke.github.io/old_blogs/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>M1-vscode-lldb</title>
    <link href="https://60ke.github.io/old_blogs/2021/03/18/M1-vscode-lldb/"/>
    <id>https://60ke.github.io/old_blogs/2021/03/18/M1-vscode-lldb/</id>
    <published>2021-03-18T09:55:14.000Z</published>
    <updated>2022-04-09T04:00:43.686Z</updated>
    
    <content type="html"><![CDATA[<p>M1的vscode商店中的lldb当前无法直接使用,通过GitHub issue踩坑操作,最终不完美可用(有时候会崩溃)<br>1.重新编译vscode-lldb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lvm and vscode-lldb dependecies</span></span><br><span class="line"></span><br><span class="line">sudo port install cmake nodejs15 npm6</span><br><span class="line">Building stuff</span><br><span class="line">build llvm</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/llvm/llvm-project.git</span><br><span class="line"><span class="built_in">cd</span> llvm-project ; mkdir build ; <span class="built_in">cd</span> build</span><br><span class="line">cmake ../llvm -DLLVM_ENABLE_PROJECTS=<span class="string">&quot;clang;libcxx;lldb&quot;</span></span><br><span class="line">make lldb lldb-server</span><br><span class="line">That is going to take a <span class="keyword">while</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a zip with llvm</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> lldb</span><br><span class="line">zip -r lldb-m1.zip bin/ lib/liblldb.12.0.0git.dylib lib/liblldb.dylib</span><br><span class="line">The content of the archive will be used by vscode-lldb later.</span><br><span class="line">Note that the content of lldb-m1.zip will probably only work on your <span class="built_in">local</span> machine as a lot of other dependencies are left outside (e.g. debugserver and required libs).</span><br><span class="line"></span><br><span class="line"><span class="comment"># building vscode-lldb</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/vadimcn/vscode-lldb.git</span><br><span class="line"><span class="built_in">cd</span> vscode-lldb</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">npm install</span><br><span class="line">mkdir build ; <span class="built_in">cd</span> build</span><br><span class="line">mkdir lldb</span><br><span class="line">mv &lt;location of lldb-m1.zip you create belore&gt; lldb/</span><br><span class="line">LLDB_PACKAGE=./lldb-m1.zip cmake ..</span><br><span class="line"><span class="comment"># replaced x86_64-apple-darwin to aarch64-apple-darwin in CMakeLists.txt and azure-pipelines.yml.</span></span><br><span class="line">make vsix_full</span><br><span class="line"><span class="comment"># If everything goes well:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mv codelldb-full.vsix codelldb-aarch64-darwin.vsix</span></span><br><span class="line"><span class="comment"># Install the official vscode-lldb extension and reload.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install codelldb-aarch64-darwin.vsix via &quot;Install from VSIX...&quot; in the extension menu of VSCode Exploratory.</span></span><br></pre></td></tr></table></figure><p>2.使用x86调试</p><p><code>rustup default stable-x86_64-apple</code></p><p><code>contral+shift+p</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lddb: use alternate backend</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;lldb</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;M1的vscode商店中的lldb当前无法直接使用,通过GitHub issue踩坑操作,最终不完美可用(有时候会崩溃)&lt;br&gt;1.重新编译vscode-lldb&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/old_blogs/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/old_blogs/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>杂谈</title>
    <link href="https://60ke.github.io/old_blogs/2021/03/03/%E6%9D%82%E8%B0%88/"/>
    <id>https://60ke.github.io/old_blogs/2021/03/03/%E6%9D%82%E8%B0%88/</id>
    <published>2021-03-03T16:31:24.000Z</published>
    <updated>2022-04-09T04:00:43.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p>1.数据抽象的能力,把现实中的问题抽象出来<br>2.算法本质上就是通过数据结构解决问题的方法,就像学习一样,先学习了数字加减乘除,方程,微积分等等,才具备解决更加复杂的问题的能力.好的数据结构+好的算法=高效的问题解决</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数据结构与算法&quot;&gt;&lt;a href=&quot;#数据结构与算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法&quot;&gt;&lt;/a&gt;数据结构与算法&lt;/h2&gt;</summary>
    
    
    
    <category term="others" scheme="https://60ke.github.io/old_blogs/categories/others/"/>
    
    
    <category term="others" scheme="https://60ke.github.io/old_blogs/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>从零实现nosql数据库</title>
    <link href="https://60ke.github.io/old_blogs/2021/03/03/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0nosql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://60ke.github.io/old_blogs/2021/03/03/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0nosql%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-03-03T14:49:43.000Z</published>
    <updated>2022-04-09T04:00:43.690Z</updated>
    
    <content type="html"><![CDATA[<p>资料:<br>如何从零写一个kv数据库？ - cholerae的回答 - 知乎<br><a href="https://www.zhihu.com/question/59469744/answer/165590616">https://www.zhihu.com/question/59469744/answer/165590616</a><br><a href="https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/">https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/</a><br><a href="https://blog.csdn.net/UnSkyToo/article/details/46574209">https://blog.csdn.net/UnSkyToo/article/details/46574209</a><br><a href="https://www.lanqiao.cn/courses/1341">https://www.lanqiao.cn/courses/1341</a><br><a href="https://segmentfault.com/a/1190000004359057">https://segmentfault.com/a/1190000004359057</a><br><a href="http://www.jos.org.cn/html/2019/9/5776.htm">http://www.jos.org.cn/html/2019/9/5776.htm</a><br><a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">https://zh.wikipedia.org/wiki/计算机科学</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;资料:&lt;br&gt;如何从零写一个kv数据库？ - cholerae的回答 - 知乎&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/59469744/answer/165590616&quot;&gt;https://www.zhihu.com/question/59469744/answer/165590616&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/&quot;&gt;https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/UnSkyToo/article/details/46574209&quot;&gt;https://blog.csdn.net/UnSkyToo/article/details/46574209&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.lanqiao.cn/courses/1341&quot;&gt;https://www.lanqiao.cn/courses/1341&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004359057&quot;&gt;https://segmentfault.com/a/1190000004359057&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jos.org.cn/html/2019/9/5776.htm&quot;&gt;http://www.jos.org.cn/html/2019/9/5776.htm&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6&quot;&gt;https://zh.wikipedia.org/wiki/计算机科学&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/old_blogs/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/old_blogs/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu管理员账号添加</title>
    <link href="https://60ke.github.io/old_blogs/2021/03/03/ubuntu%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0/"/>
    <id>https://60ke.github.io/old_blogs/2021/03/03/ubuntu%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0/</id>
    <published>2021-03-03T10:59:28.000Z</published>
    <updated>2022-04-09T04:00:43.690Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu管理员账号添加,百度搜出来的结果很多总是不好用,这里记录一下<br><strong>root用户下操作</strong></p><h2 id="1-添加账户"><a href="#1-添加账户" class="headerlink" title="1.添加账户"></a>1.添加账户</h2><p><code>adduser username</code></p><h2 id="2-添加sudo权限"><a href="#2-添加sudo权限" class="headerlink" title="2.添加sudo权限"></a>2.添加<code>sudo</code>权限</h2><p><code>adduser username sudo</code><br>OR<br><code>usermod -aG sudo vivek</code></p><p>OR<br><code>sudo usermod -aG sudo vivek</code></p><p>OR<br><code>sudo adduser vivek sudo</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ubuntu管理员账号添加,百度搜出来的结果很多总是不好用,这里记录一下&lt;br&gt;&lt;strong&gt;root用户下操作&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://60ke.github.io/old_blogs/categories/linux/"/>
    
    
    <category term="linux" scheme="https://60ke.github.io/old_blogs/tags/linux/"/>
    
  </entry>
  
</feed>
