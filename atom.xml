<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LookForAdmin</title>
  
  <subtitle>已是乾坤大，更怜草木青</subtitle>
  <link href="https://60ke.github.io/atom.xml" rel="self"/>
  
  <link href="https://60ke.github.io/"/>
  <updated>2021-04-29T03:07:54.307Z</updated>
  <id>https://60ke.github.io/</id>
  
  <author>
    <name>lsk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>终端录屏</title>
    <link href="https://60ke.github.io/2021/04/29/%E7%BB%88%E7%AB%AF%E5%BD%95%E5%B1%8F/"/>
    <id>https://60ke.github.io/2021/04/29/%E7%BB%88%E7%AB%AF%E5%BD%95%E5%B1%8F/</id>
    <published>2021-04-29T02:09:56.000Z</published>
    <updated>2021-04-29T03:07:54.307Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然看到一个书签<code>http://showterm.io</code>,<code>showterm</code>是一个终端录屏工具但是现在,感觉用的人不多了,除了<code>showterm</code>以外还有<a href="https://github.com/icholy/ttygif">ttygif</a>,<a href="https://github.com/faressoft/terminalizer">terminalizer</a>,<a href="https://github.com/asciinema/asciinema">asciinema</a></p><h2 id="ttygif"><a href="#ttygif" class="headerlink" title="ttygif"></a>ttygif</h2><p><code>C</code>开发的录屏工具,mac下使用<code>brew install ttygif</code>即可安装</p><ul><li><p>录制</p><p>ttyrec + 自定义的录制名</p></li><li><p>保存<br>ttygif + <code>自定义的录制名</code> (-s 可设定倍速)</p></li><li><p>效果示意<br><img src="https://i.loli.net/2021/04/29/tQY7A2rhTNfmMqX.gif" alt="tQY7A2rhTNfmMqX"><br>本来有个13M的比较全的录屏但是gitee只支持1M文件的非登录可见,同时需要注意的是录屏录取的是整个终端,而不是当前的标签页(录屏过程切换其它标签,则切换后的标签的显示内容也会被录下)</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天突然看到一个书签&lt;code&gt;http://showterm.io&lt;/code&gt;,&lt;code&gt;showterm&lt;/code&gt;是一个终端录屏工具但是现在,感觉用的人不多了,除了&lt;code&gt;showterm&lt;/code&gt;以外还有&lt;a href=&quot;https://github.com/icholy/ttygif&quot;&gt;ttygif&lt;/a&gt;,&lt;a href=&quot;https://github.com/faressoft/terminalizer&quot;&gt;terminalizer&lt;/a&gt;,&lt;a href=&quot;https://github.com/asciinema/asciinema&quot;&gt;asciinema&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="shell" scheme="https://60ke.github.io/categories/shell/"/>
    
    
    <category term="shell" scheme="https://60ke.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之子字符串查找</title>
    <link href="https://60ke.github.io/2021/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/"/>
    <id>https://60ke.github.io/2021/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</id>
    <published>2021-04-16T08:48:01.000Z</published>
    <updated>2021-04-21T11:36:35.354Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个查找 substring 的函数。如果在母串中找到了子串，返回子串在母串中出现的下标，如果没有找到，返回 -1，如果子串是空串，则返回 0 。</p><p>go语言可以用<code>strings</code>直接实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="keyword">string</span>, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Index(haystack, needle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>strings</code>中的index是Rabin–Karp算法实现的<br>实现同样的功能的算法还有<br>sunday算法</p><p>kmp算法</p><p>相关链接:<a href="https://segmentfault.com/a/1190000016554961">https://segmentfault.com/a/1190000016554961</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现一个查找 substring 的函数。如果在母串中找到了子串，返回子串在母串中出现的下标，如果没有找到，返回 -1，如果子串是空串，则返回 0 。&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="https://60ke.github.io/categories/go/"/>
    
    
    <category term="go" scheme="https://60ke.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go调用RUST</title>
    <link href="https://60ke.github.io/2021/04/06/go%E8%B0%83%E7%94%A8RUST/"/>
    <id>https://60ke.github.io/2021/04/06/go%E8%B0%83%E7%94%A8RUST/</id>
    <published>2021-04-06T02:46:59.000Z</published>
    <updated>2021-04-07T08:34:59.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无参函数调用"><a href="#无参函数调用" class="headerlink" title="无参函数调用"></a>无参函数调用</h2><p>先写一个rust的lib项目生成动态库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new --lib embed</span><br></pre></td></tr></table></figure><ul><li>Cargo.toml<figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;k &lt;2589788697@qq.com&gt;&quot;</span>]</span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[lib]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="attr">crate-type</span> = [<span class="string">&quot;dylib&quot;</span>]</span><br></pre></td></tr></table></figure></li><li>lib.rs<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">process</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> handles:<span class="built_in">Vec</span>&lt;_&gt;=(<span class="number">0</span>..=<span class="number">10</span>).map(|_|&#123;</span><br><span class="line">        thread::spawn(||&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5000000</span>&#123;</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            x</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).collect();</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> handles&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;thread finished with count=&#123;&#125;&quot;</span>,h.join().map_err(|_|<span class="string">&quot;could not join a thread&quot;</span>).unwrap());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译<br>运行 <code>cargo build --release</code>得到<code>libembed.dylib</code></li></ul><p>将文件按照如下放置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── Cargo.lock</span><br><span class="line">├── Cargo.toml</span><br><span class="line">├── src</span><br><span class="line">│   ├── a.out</span><br><span class="line">│   ├── interface.h</span><br><span class="line">│   ├── lib.rs</span><br><span class="line">│   ├── libembed.dylib</span><br><span class="line">│   ├── main.c</span><br><span class="line">│   └── test.go</span><br></pre></td></tr></table></figure><ul><li>interface.h<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>main.c<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;interface.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    process();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译运行C<br><code>gcc main.c -L. -lembed &amp;&amp; ./a.out</code><br>PS:linux下编译<code>gcc main.c -L. -lembed -Wl,-rpath=./</code><br><code>-Wl,-rpath=./</code>用于指定程序运行寻找库的路径<br>运行结果<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br><span class="line">thread finished with count=5000000</span><br></pre></td></tr></table></figure></li><li>test.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#cgo LDFLAGS: -L./ -lembed</span></span><br><span class="line"><span class="comment">#include &quot;interface.h&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">C.process()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><code>go run test.go</code>结果与C运行一致</li></ul><h2 id="有参函数调用"><a href="#有参函数调用" class="headerlink" title="有参函数调用"></a>有参函数调用</h2><ul><li>lib.rs<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[repr(C)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    a:<span class="built_in">u32</span>,</span><br><span class="line">    b:<span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">process</span></span>(test:*<span class="keyword">const</span> Test)&#123;</span><br><span class="line">    <span class="keyword">unsafe</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,(*test).a);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,(*test).b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>cargo build --release --out-dir . -Z unstable-options</code></li><li>main.c<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(struct Test *test)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Test</span> <span class="title">test</span> =</span> &#123;<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    process(&amp;test);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>gcc main.c -L. -lembed -Wl,-rpath=./ &amp;&amp; ./a.out</code></li></ul><p>output</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><ul><li><p>interface.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125; Test;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(struct Test *test)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#cgo LDFLAGS: -L./ -lembed -Wl,-rpath=./</span></span><br><span class="line"><span class="comment">#include &quot;interface.h&quot; //非标准c头文件，所以用引号</span></span><br><span class="line"><span class="comment">typedef struct Test</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int a;</span></span><br><span class="line"><span class="comment">    int b;</span></span><br><span class="line"><span class="comment">&#125; Test; #可以放但是不建议(建议放入interface.h)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test := C.Test&#123;a: <span class="number">3</span>, b: <span class="number">4</span>&#125;</span><br><span class="line">C.process(&amp;test)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串指针返回"><a href="#字符串指针返回" class="headerlink" title="字符串指针返回"></a>字符串指针返回</h2><p>很多数据结构在跨语言调用,得在各个语言来回解析,比较麻烦,我们直接以json字符串传递解析可以极大的简化问题的处理</p></li><li><p>lib.rs</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> libc::c_int;</span><br><span class="line"><span class="keyword">use</span> libc::c_char;</span><br><span class="line"><span class="keyword">use</span> std::ffi::&#123;CStr,CString&#125;;</span><br><span class="line"><span class="keyword">use</span> json;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">process</span></span>(a:c_int)&#123;</span><br><span class="line">    <span class="keyword">let</span> handles:<span class="built_in">Vec</span>&lt;_&gt;=(<span class="number">0</span>..=<span class="number">10</span>).map(|_|&#123;</span><br><span class="line">        thread::spawn(||&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5000000</span>&#123;</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            x</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).collect();</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> handles&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;thread finished with count=&#123;&#125;&quot;</span>,h.join().map_err(|_|<span class="string">&quot;could not join a thread&quot;</span>).unwrap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; have done&quot;</span>,a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">json_parse</span></span>(c_buf:*<span class="keyword">const</span> c_char)-&gt; *<span class="keyword">const</span> c_char&#123;</span><br><span class="line">    <span class="keyword">let</span> c_str = <span class="keyword">unsafe</span> &#123; CStr::from_ptr(c_buf) &#125;.to_str().unwrap();</span><br><span class="line">    <span class="keyword">let</span> parsed = json::parse(c_str).unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,parsed[<span class="string">&quot;a&quot;</span>]);</span><br><span class="line">    <span class="keyword">let</span> data = r#<span class="string">&quot;</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>name<span class="string">&quot;: &quot;</span>John Doe<span class="string">&quot;,</span></span><br><span class="line"><span class="string">            &quot;</span>age<span class="string">&quot;: 43,</span></span><br><span class="line"><span class="string">            &quot;</span>phones<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">                &quot;</span>+<span class="number">44</span> <span class="number">1234567</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">                &quot;</span>+<span class="number">44</span> <span class="number">2345678</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;&quot;</span>#;</span><br><span class="line">        CString::new(data).unwrap().into_raw()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;interface.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    process(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str = <span class="string">&quot;&#123;\&quot;a\&quot;: 3&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ret_str = json_parse(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ret_str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>interface.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">json_parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *c_buf)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>test.go<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#cgo LDFLAGS: -L./ -lembed</span></span><br><span class="line"><span class="comment">#include &quot;interface.h&quot; //非标准c头文件，所以用引号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">C.process(C.<span class="keyword">int</span>(<span class="number">3</span>))</span><br><span class="line">ret_ptr := C.json_parse(C.CString(<span class="string">`&#123;&quot;a&quot;:3&#125;`</span>))</span><br><span class="line">fmt.Println(C.GoString(ret_ptr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;无参函数调用&quot;&gt;&lt;a href=&quot;#无参函数调用&quot; class=&quot;headerlink&quot; title=&quot;无参函数调用&quot;&gt;&lt;/a&gt;无参函数调用&lt;/h2&gt;</summary>
    
    
    
    <category term="go" scheme="https://60ke.github.io/categories/go/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
    <category term="go" scheme="https://60ke.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>M1-vscode-lldb</title>
    <link href="https://60ke.github.io/2021/03/18/M1-vscode-lldb/"/>
    <id>https://60ke.github.io/2021/03/18/M1-vscode-lldb/</id>
    <published>2021-03-18T01:55:14.000Z</published>
    <updated>2021-03-18T02:01:41.436Z</updated>
    
    <content type="html"><![CDATA[<p>M1的vscode商店中的lldb当前无法直接使用,通过GitHub issue踩坑操作,最终不完美可用(有时候会崩溃)<br>1.重新编译vscode-lldb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lvm and vscode-lldb dependecies</span></span><br><span class="line"></span><br><span class="line">sudo port install cmake nodejs15 npm6</span><br><span class="line">Building stuff</span><br><span class="line">build llvm</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/llvm/llvm-project.git</span><br><span class="line"><span class="built_in">cd</span> llvm-project ; mkdir build ; <span class="built_in">cd</span> build</span><br><span class="line">cmake ../llvm -DLLVM_ENABLE_PROJECTS=<span class="string">&quot;clang;libcxx;lldb&quot;</span></span><br><span class="line">make lldb lldb-server</span><br><span class="line">That is going to take a <span class="keyword">while</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a zip with llvm</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> lldb</span><br><span class="line">zip -r lldb-m1.zip bin/ lib/liblldb.12.0.0git.dylib lib/liblldb.dylib</span><br><span class="line">The content of the archive will be used by vscode-lldb later.</span><br><span class="line">Note that the content of lldb-m1.zip will probably only work on your <span class="built_in">local</span> machine as a lot of other dependencies are left outside (e.g. debugserver and required libs).</span><br><span class="line"></span><br><span class="line"><span class="comment"># building vscode-lldb</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/vadimcn/vscode-lldb.git</span><br><span class="line"><span class="built_in">cd</span> vscode-lldb</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">npm install</span><br><span class="line">mkdir build ; <span class="built_in">cd</span> build</span><br><span class="line">mkdir lldb</span><br><span class="line">mv &lt;location of lldb-m1.zip you create belore&gt; lldb/</span><br><span class="line">LLDB_PACKAGE=./lldb-m1.zip cmake ..</span><br><span class="line"><span class="comment"># replaced x86_64-apple-darwin to aarch64-apple-darwin in CMakeLists.txt and azure-pipelines.yml.</span></span><br><span class="line">make vsix_full</span><br><span class="line"><span class="comment"># If everything goes well:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mv codelldb-full.vsix codelldb-aarch64-darwin.vsix</span></span><br><span class="line"><span class="comment"># Install the official vscode-lldb extension and reload.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install codelldb-aarch64-darwin.vsix via &quot;Install from VSIX...&quot; in the extension menu of VSCode Exploratory.</span></span><br></pre></td></tr></table></figure><p>2.使用x86调试</p><p><code>rustup default stable-x86_64-apple</code></p><p><code>contral+shift+p</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lddb: use alternate backend</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;lldb</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;M1的vscode商店中的lldb当前无法直接使用,通过GitHub issue踩坑操作,最终不完美可用(有时候会崩溃)&lt;br&gt;1.重新编译vscode-lldb&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>杂谈</title>
    <link href="https://60ke.github.io/2021/03/03/%E6%9D%82%E8%B0%88/"/>
    <id>https://60ke.github.io/2021/03/03/%E6%9D%82%E8%B0%88/</id>
    <published>2021-03-03T08:31:24.000Z</published>
    <updated>2021-03-03T08:35:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><p>1.数据抽象的能力,把现实中的问题抽象出来<br>2.算法本质上就是通过数据结构解决问题的方法,就像学习一样,先学习了数字加减乘除,方程,微积分等等,才具备解决更加复杂的问题的能力.好的数据结构+好的算法=高效的问题解决</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数据结构与算法&quot;&gt;&lt;a href=&quot;#数据结构与算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法&quot;&gt;&lt;/a&gt;数据结构与算法&lt;/h2&gt;</summary>
    
    
    
    <category term="others" scheme="https://60ke.github.io/categories/others/"/>
    
    
    <category term="others" scheme="https://60ke.github.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>从零实现nosql数据库</title>
    <link href="https://60ke.github.io/2021/03/03/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0nosql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://60ke.github.io/2021/03/03/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0nosql%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-03-03T06:49:43.000Z</published>
    <updated>2021-03-03T08:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>资料:<br>如何从零写一个kv数据库？ - cholerae的回答 - 知乎<br><a href="https://www.zhihu.com/question/59469744/answer/165590616">https://www.zhihu.com/question/59469744/answer/165590616</a><br><a href="https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/">https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/</a><br><a href="https://blog.csdn.net/UnSkyToo/article/details/46574209">https://blog.csdn.net/UnSkyToo/article/details/46574209</a><br><a href="https://www.lanqiao.cn/courses/1341">https://www.lanqiao.cn/courses/1341</a><br><a href="https://segmentfault.com/a/1190000004359057">https://segmentfault.com/a/1190000004359057</a><br><a href="http://www.jos.org.cn/html/2019/9/5776.htm">http://www.jos.org.cn/html/2019/9/5776.htm</a><br><a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">https://zh.wikipedia.org/wiki/计算机科学</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;资料:&lt;br&gt;如何从零写一个kv数据库？ - cholerae的回答 - 知乎&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/59469744/answer/165590616&quot;&gt;https://www.zhihu.com/question/59469744/answer/165590616&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/&quot;&gt;https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/UnSkyToo/article/details/46574209&quot;&gt;https://blog.csdn.net/UnSkyToo/article/details/46574209&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.lanqiao.cn/courses/1341&quot;&gt;https://www.lanqiao.cn/courses/1341&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004359057&quot;&gt;https://segmentfault.com/a/1190000004359057&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jos.org.cn/html/2019/9/5776.htm&quot;&gt;http://www.jos.org.cn/html/2019/9/5776.htm&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6&quot;&gt;https://zh.wikipedia.org/wiki/计算机科学&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu管理员账号添加</title>
    <link href="https://60ke.github.io/2021/03/03/ubuntu%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0/"/>
    <id>https://60ke.github.io/2021/03/03/ubuntu%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0/</id>
    <published>2021-03-03T02:59:28.000Z</published>
    <updated>2021-03-03T03:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu管理员账号添加,百度搜出来的结果很多总是不好用,这里记录一下<br><strong>root用户下操作</strong></p><h2 id="1-添加账户"><a href="#1-添加账户" class="headerlink" title="1.添加账户"></a>1.添加账户</h2><p><code>adduser username</code></p><h2 id="2-添加sudo权限"><a href="#2-添加sudo权限" class="headerlink" title="2.添加sudo权限"></a>2.添加<code>sudo</code>权限</h2><p><code>adduser username sudo</code><br>OR<br><code>usermod -aG sudo vivek</code></p><p>OR<br><code>sudo usermod -aG sudo vivek</code></p><p>OR<br><code>sudo adduser vivek sudo</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ubuntu管理员账号添加,百度搜出来的结果很多总是不好用,这里记录一下&lt;br&gt;&lt;strong&gt;root用户下操作&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://60ke.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://60ke.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>new_mac</title>
    <link href="https://60ke.github.io/2021/02/26/new-mac/"/>
    <id>https://60ke.github.io/2021/02/26/new-mac/</id>
    <published>2021-02-26T06:41:17.000Z</published>
    <updated>2021-03-03T02:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git等命令安装"><a href="#git等命令安装" class="headerlink" title="git等命令安装"></a>git等命令安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line">sudo xcodebuild -license accept</span><br><span class="line">sudo spctl --master-disable <span class="comment">#开启任意来源app安装</span></span><br><span class="line">sudo xattr -rd com.apple.quarantine /Applications/LockedApp.app <span class="comment">#另一种开启任意来源app安装</span></span><br></pre></td></tr></table></figure><h2 id="iterm2美化"><a href="#iterm2美化" class="headerlink" title="iterm2美化"></a>iterm2美化</h2><p><a href="https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts">hack nerd font</a></p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><h2 id="ohmyzsh安装设置"><a href="#ohmyzsh安装设置" class="headerlink" title="ohmyzsh安装设置"></a>ohmyzsh安装设置</h2><p>启用插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins&#x3D;(git zsh-autosuggestions zsh-syntax-highlighting autojump)</span><br></pre></td></tr></table></figure><h2 id="shell工具"><a href="#shell工具" class="headerlink" title="shell工具"></a>shell工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install fzf autojump</span><br></pre></td></tr></table></figure><h2 id="github-ssh-key配置"><a href="#github-ssh-key配置" class="headerlink" title="github ssh key配置"></a>github ssh key配置</h2><p>生产public key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;i505125461@live.com&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;git等命令安装&quot;&gt;&lt;a href=&quot;#git等命令安装&quot; class=&quot;headerlink&quot; title=&quot;git等命令安装&quot;&gt;&lt;/a&gt;git等命令安装&lt;/h2&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>ios-c环境安装</title>
    <link href="https://60ke.github.io/2021/02/05/ios-c%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://60ke.github.io/2021/02/05/ios-c%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2021-02-05T06:26:26.000Z</published>
    <updated>2021-03-03T02:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>相关链接:<br><a href="https://stackoverflow.com/questions/28085052/compile-ios-program-from-linux-commandline">Compile IOS program from linux commandline</a><br><a href="https://code.google.com/archive/p/ios-toolchain-based-on-clang-for-linux/wikis/iphoneos_sdk_en.wiki">ios-toolchain-based-on-clang-for-linux - iphoneos_sdk_en.wiki</a><br><a href="https://github.com/ming1016/study/wiki/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90-iOS-%E7%BC%96%E8%AF%91-Clang---LLVM">深入剖析 iOS 编译 Clang LLVM</a><br><a href="https://github.com/okanon/iPhoneOS.sdk">https://github.com/okanon/iPhoneOS.sdk</a><br><a href="https://www.reddit.com/r/jailbreak/comments/axz229/helphow_can_i_fix_the_clang_stdioh_not_found/">how can I fix the clang ‘stdio.h’ not found error? On iOS 12.1 with unc0ver jailbroken</a></p><p>安装<br><code>llvmclang</code><br><code>iostoolchain</code><br><code>libclang</code><br><code>llvmclang</code><br>等</p><p><code>hello.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译: <code>clang hello.c</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello.c:1:10: fatal error: &#39;stdio.h&#39; file not found</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">         ^~~~~~~~~</span><br><span class="line">1 error generated.</span><br></pre></td></tr></table></figure><p>加入 -isysroot参数:<br><code>clang -isysroot iPhoneOS13.2.sdk hello.c</code><br>成功编译运行.</p><p>编译<code>c++</code> 暂未解决<br><code>clang -isystem iPhoneOS13.2.sdk hello.cpp</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;相关链接:&lt;br&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28085052/compile-ios-program-from-linux-commandline&quot;&gt;Compile IOS program from linux commandline&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://code.google.com/archive/p/ios-toolchain-based-on-clang-for-linux/wikis/iphoneos_sdk_en.wiki&quot;&gt;ios-toolchain-based-on-clang-for-linux - iphoneos_sdk_en.wiki&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/ming1016/study/wiki/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90-iOS-%E7%BC%96%E8%AF%91-Clang---LLVM&quot;&gt;深入剖析 iOS 编译 Clang LLVM&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/okanon/iPhoneOS.sdk&quot;&gt;https://github.com/okanon/iPhoneOS.sdk&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.reddit.com/r/jailbreak/comments/axz229/helphow_can_i_fix_the_clang_stdioh_not_found/&quot;&gt;how can I fix the clang ‘stdio.h’ not found error? On iOS 12.1 with unc0ver jailbroken&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>rust包导入</title>
    <link href="https://60ke.github.io/2021/02/03/rust%E5%8C%85%E5%AF%BC%E5%85%A5/"/>
    <id>https://60ke.github.io/2021/02/03/rust%E5%8C%85%E5%AF%BC%E5%85%A5/</id>
    <published>2021-02-03T02:30:15.000Z</published>
    <updated>2021-03-03T02:08:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>rust 新版本导入包使用,可以不用先<code>extern crate</code>只需在cargo.toml声明,然后可直接用<code>use</code></p><p>我们创建个项目<code>codec_test</code></p><p>当rust中同时存在<code>lib.rs</code>,<code>main.rs</code>时无法使用,<code>use crate::types::*</code><br>错误提示:<br><code>help: a similar path exists: codec_test::types</code>,这是因为在<code>lib.rs</code>中对于<code>lib.rs</code>来说<code>crate::</code>代表了<code>codec_test</code>crate本身,而对于<code>main.rs</code>来说则相当于是<code>mian.rs</code>导入了名为<code>codec_test</code>的外部<code>crate</code></p><p>代码验证:<br><code>tree</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── Cargo.toml</span><br><span class="line">├── src</span><br><span class="line">│   ├── lib.rs</span><br><span class="line">│   ├── main.rs</span><br><span class="line">│   └── types.rs</span><br></pre></td></tr></table></figure><p><code>lib.rs</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> types;</span><br></pre></td></tr></table></figure><p><code>cargo.toml</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;codec_test&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">authors = [&quot;k &lt;worileqing@163.com&gt;&quot;]</span><br><span class="line">edition = &quot;2018&quot;</span><br><span class="line"></span><br><span class="line"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br></pre></td></tr></table></figure><p><code>main.rs</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::convert::<span class="built_in">From</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use crate::types::Sink;</span></span><br><span class="line"><span class="keyword">use</span> codec_test::types::Sink;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use codec_test::types::Sink1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">type</span> <span class="title">U256</span></span> = [<span class="built_in">u8</span>; <span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Sink1</span></span>&#123;</span><br><span class="line">    <span class="keyword">pub</span> capacity:<span class="built_in">usize</span>,</span><br><span class="line">    <span class="keyword">pub</span> preamble:<span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;,</span><br><span class="line">    <span class="keyword">pub</span> heap:<span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(num:<span class="built_in">u32</span>) -&gt; U256&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> slice = [<span class="number">0u8</span>;<span class="number">32</span>];</span><br><span class="line">    slice[<span class="number">28</span>] = (num&gt;&gt;<span class="number">24</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    slice[<span class="number">29</span>] = (num&gt;&gt;<span class="number">16</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    slice[<span class="number">30</span>] = (num&gt;&gt;<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    slice[<span class="number">31</span>] = num <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    slice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="built_in">From</span>&lt;<span class="built_in">u32</span>&gt; <span class="keyword">for</span> Sink1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(num: <span class="built_in">u32</span>) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> slice = [<span class="number">0u8</span>;<span class="number">32</span>];</span><br><span class="line">        slice[<span class="number">28</span>] = (num&gt;&gt;<span class="number">24</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">        slice[<span class="number">29</span>] = (num&gt;&gt;<span class="number">16</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">        slice[<span class="number">30</span>] = (num&gt;&gt;<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">        slice[<span class="number">31</span>] = num <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">        Sink1&#123;</span><br><span class="line">            capacity:<span class="number">1</span> <span class="keyword">as</span> <span class="built_in">usize</span>,</span><br><span class="line">            preamble:slice.into(),</span><br><span class="line">            heap:<span class="built_in">Vec</span>::new(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Codec</span></span>:<span class="built_in">Sized</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">encode</span></span>(<span class="keyword">self</span>,sink: &amp;<span class="keyword">mut</span> Sink);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> Codec <span class="keyword">for</span> <span class="built_in">u32</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">encode</span></span>(<span class="keyword">self</span>,sink: &amp;<span class="keyword">mut</span> Sink)&#123;</span><br><span class="line">        <span class="keyword">let</span> tar = from(<span class="keyword">self</span>);</span><br><span class="line">        sink.preamble.extend_from_slice(&amp;tar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a:<span class="built_in">u32</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> sink = Sink&#123;</span><br><span class="line">        capacity:<span class="number">1</span>,</span><br><span class="line">        preamble:<span class="built_in">Vec</span>::new(),</span><br><span class="line">        heap:<span class="built_in">Vec</span>::new(),</span><br><span class="line">    &#125;;</span><br><span class="line">    a.encode(&amp;<span class="keyword">mut</span> sink);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,sink);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sink1 = Sink1::from(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,sink1);</span><br><span class="line">    <span class="keyword">let</span> sink2:Sink1 = <span class="number">4</span>.into();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;sink2 &#123;:?&#125;&quot;</span>,sink2); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>types.rs</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Sink</span></span>&#123;</span><br><span class="line">    <span class="keyword">pub</span> capacity:<span class="built_in">usize</span>,</span><br><span class="line">    <span class="keyword">pub</span> preamble:<span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;,</span><br><span class="line">    <span class="keyword">pub</span> heap:<span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除<code>main.rs</code>,将代码放入<code>lib.rs</code>使用<code>cargo test -- --nocapture test</code>验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── Cargo.toml</span><br><span class="line">├── src</span><br><span class="line">│   ├── lib.rs</span><br><span class="line">│   └── types.rs</span><br></pre></td></tr></table></figure><p><code>lib.rs</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> types;</span><br><span class="line"><span class="keyword">use</span> std::convert::<span class="built_in">From</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::types::Sink;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use wasm2ct::types::Sink1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">type</span> <span class="title">U256</span></span> = [<span class="built_in">u8</span>; <span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Sink1</span></span>&#123;</span><br><span class="line">    <span class="keyword">pub</span> capacity:<span class="built_in">usize</span>,</span><br><span class="line">    <span class="keyword">pub</span> preamble:<span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;,</span><br><span class="line">    <span class="keyword">pub</span> heap:<span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(num:<span class="built_in">u32</span>) -&gt; U256&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> slice = [<span class="number">0u8</span>;<span class="number">32</span>];</span><br><span class="line">    slice[<span class="number">28</span>] = (num&gt;&gt;<span class="number">24</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    slice[<span class="number">29</span>] = (num&gt;&gt;<span class="number">16</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    slice[<span class="number">30</span>] = (num&gt;&gt;<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    slice[<span class="number">31</span>] = num <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    slice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="built_in">From</span>&lt;<span class="built_in">u32</span>&gt; <span class="keyword">for</span> Sink1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(num: <span class="built_in">u32</span>) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> slice = [<span class="number">0u8</span>;<span class="number">32</span>];</span><br><span class="line">        slice[<span class="number">28</span>] = (num&gt;&gt;<span class="number">24</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">        slice[<span class="number">29</span>] = (num&gt;&gt;<span class="number">16</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">        slice[<span class="number">30</span>] = (num&gt;&gt;<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">        slice[<span class="number">31</span>] = num <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">        Sink1&#123;</span><br><span class="line">            capacity:<span class="number">1</span> <span class="keyword">as</span> <span class="built_in">usize</span>,</span><br><span class="line">            preamble:slice.into(),</span><br><span class="line">            heap:<span class="built_in">Vec</span>::new(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Codec</span></span>:<span class="built_in">Sized</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">encode</span></span>(<span class="keyword">self</span>,sink: &amp;<span class="keyword">mut</span> Sink);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> Codec <span class="keyword">for</span> <span class="built_in">u32</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">encode</span></span>(<span class="keyword">self</span>,sink: &amp;<span class="keyword">mut</span> Sink)&#123;</span><br><span class="line">        <span class="keyword">let</span> tar = from(<span class="keyword">self</span>);</span><br><span class="line">        sink.preamble.extend_from_slice(&amp;tar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">test</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a:<span class="built_in">u32</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> sink = Sink&#123;</span><br><span class="line">        capacity:<span class="number">1</span>,</span><br><span class="line">        preamble:<span class="built_in">Vec</span>::new(),</span><br><span class="line">        heap:<span class="built_in">Vec</span>::new(),</span><br><span class="line">    &#125;;</span><br><span class="line">    a.encode(&amp;<span class="keyword">mut</span> sink);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,sink);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sink1 = Sink1::from(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,sink1);</span><br><span class="line">    <span class="keyword">let</span> sink2:Sink1 = <span class="number">4</span>.into();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;sink2 &#123;:?&#125;&quot;</span>,sink2); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;rust 新版本导入包使用,可以不用先&lt;code&gt;extern crate&lt;/code&gt;只需在cargo.toml声明,然后可直接用&lt;code&gt;use&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>高性能web服务与并发测试</title>
    <link href="https://60ke.github.io/2021/01/22/%E9%AB%98%E6%80%A7%E8%83%BDweb%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/"/>
    <id>https://60ke.github.io/2021/01/22/%E9%AB%98%E6%80%A7%E8%83%BDweb%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</id>
    <published>2021-01-22T06:55:28.000Z</published>
    <updated>2021-03-03T02:08:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发测试工具"><a href="#并发测试工具" class="headerlink" title="并发测试工具"></a>并发测试工具</h1><p>1.<a href="http://httpd.apache.org/docs/2.2/programs/ab.html">Apache ab</a><br>2.<a href="https://locust.io/">Python locust</a><br>3.<a href="https://www.npmjs.com/package/loadtest">nodejs loadtest</a><br>4.<a href="https://redmine.lighttpd.net/projects/weighttp/wiki">weighttp</a><br>5.<a href="https://jmeter.apache.org/">Apache JMeter</a><br>6.<a href="https://github.com/wg/wrk">wrk</a></p><h1 id="并发Web开发"><a href="#并发Web开发" class="headerlink" title="并发Web开发"></a>并发Web开发</h1><p>1.Python的并发服务:<a href="https://cpp.la/439.html?utm_source=wechat_session&utm_medium=social&utm_oi=542263647259381760">Flask gevent 多进程WSGI（非gunicorn）</a>,这篇博客已经对并发进行分析测试了,为了防止失联,把代码搬运了:</p><h2 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># code by https://cpp.la, 2020-04-20</span></span><br><span class="line"><span class="comment"># flask + gevent + multiprocess + wsgi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line">monkey.patch_all()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count, Process</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_benchmark</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">MULTI_PROCESS</span>):</span></span><br><span class="line">    <span class="keyword">if</span> MULTI_PROCESS == <span class="literal">False</span>:</span><br><span class="line">        WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8080</span>), app).serve_forever()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mulserver = WSGIServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8080</span>), app)</span><br><span class="line">        mulserver.start()</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">server_forever</span>():</span></span><br><span class="line">            mulserver.start_accepting()</span><br><span class="line">            mulserver._stop_event.wait()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cpu_count()):</span><br><span class="line">            p = Process(target=server_forever)</span><br><span class="line">            p.start()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 单进程 + 协程</span></span><br><span class="line">    run(<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 多进程 + 协程</span></span><br><span class="line">    <span class="comment"># run(True)</span></span><br></pre></td></tr></table></figure><p>2.RUST并发服务<br><code>rust actix</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> actix_web::&#123;get, web, App, HttpServer, Responder&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[get(<span class="meta-string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">fn</span> <span class="title">index</span></span>(web::Path((id, name)): web::Path&lt;(<span class="built_in">u32</span>, <span class="built_in">String</span>)&gt;) -&gt; <span class="keyword">impl</span> Responder &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">&quot;Hello &#123;&#125;! id:&#123;&#125;&quot;</span>, name, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[actix_web::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; std::io::<span class="built_in">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    HttpServer::new(|| App::new().service(index))</span><br><span class="line">        .bind(<span class="string">&quot;127.0.0.1:8080&quot;</span>)?</span><br><span class="line">        .run()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>actix 测试结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wrk -c100 -t16 -d5s http://127.0.0.1:8080</span><br><span class="line">Running 5s <span class="built_in">test</span> @ http://127.0.0.1:8080</span><br><span class="line">  16 threads and 100 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   692.92us  671.89us  27.97ms   98.85%</span><br><span class="line">    Req/Sec     9.29k   829.44    20.49k    97.03%</span><br><span class="line">  746546 requests <span class="keyword">in</span> 5.10s, 58.38MB <span class="built_in">read</span></span><br><span class="line">  Non-2xx or 3xx responses: 746546</span><br><span class="line">Requests/sec: 146385.73</span><br><span class="line">Transfer/sec:     11.45MB</span><br><span class="line">./wrk -c1000 -t16 -d5s http://127.0.0.1:8080</span><br><span class="line">Running 5s <span class="built_in">test</span> @ http://127.0.0.1:8080</span><br><span class="line">  16 threads and 1000 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     6.37ms    1.98ms  78.58ms   93.94%</span><br><span class="line">    Req/Sec     9.54k     3.48k   86.90k    92.16%</span><br><span class="line">  763414 requests <span class="keyword">in</span> 5.10s, 59.70MB <span class="built_in">read</span></span><br><span class="line">  Non-2xx or 3xx responses: 763414</span><br><span class="line">Requests/sec: 149702.90</span><br><span class="line">Transfer/sec:     11.71MB</span><br></pre></td></tr></table></figure><p>测试机器为8核16线程的服务器,可以看到actix的性能还是相当强大的.另外突然想到了一个问题<br><a href="https://www.zhihu.com/question/43590414">Linux中本机和本机Socket通信会走网卡吗？</a></p><h1 id="并发测试"><a href="#并发测试" class="headerlink" title="并发测试"></a>并发测试</h1><p>起先用了<code>loadtest</code>测试,关于<code>Apache ab</code>,<code>weighttp</code>的性能<code>loadtest</code>中有提到,感觉并不理想,后来使用wrk发现性能更强,故使用<code>wrk</code>测试.<code>wrk</code>支持<code>lua</code>脚本的嵌入调用,支持<code>post</code>,<code>get</code>,等调用,亦可使用<code>lua</code>脚本同时对多个接口进行测试.</p><h2 id="mul-lua多接口测试脚本"><a href="#mul-lua多接口测试脚本" class="headerlink" title="mul.lua多接口测试脚本"></a><code>mul.lua</code>多接口测试脚本</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Resource: http://czerasz.com/2015/07/19/wrk-http-benchmarking-tool-example/</span></span><br><span class="line"><span class="comment">-- Module instantiation</span></span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">&quot;cjson&quot;</span></span><br><span class="line"><span class="keyword">local</span> cjson2 = cjson.new()</span><br><span class="line"><span class="keyword">local</span> cjson_safe = <span class="built_in">require</span> <span class="string">&quot;cjson.safe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Initialize the pseudo random number generator</span></span><br><span class="line"><span class="comment">-- Resource: http://lua-users.org/wiki/MathLibraryTutorial</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())</span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">random</span>(); <span class="built_in">math</span>.<span class="built_in">random</span>(); <span class="built_in">math</span>.<span class="built_in">random</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Shuffle array</span></span><br><span class="line"><span class="comment">-- Returns a randomly shuffled array</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span><span class="params">(paths)</span></span></span><br><span class="line">  <span class="keyword">local</span> j, k</span><br><span class="line">  <span class="keyword">local</span> n = #paths</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, n <span class="keyword">do</span></span><br><span class="line">    j, k = <span class="built_in">math</span>.<span class="built_in">random</span>(n), <span class="built_in">math</span>.<span class="built_in">random</span>(n)</span><br><span class="line">    paths[j], paths[k] = paths[k], paths[j]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> paths</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Load URL paths from the file</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load_request_objects_from_file</span><span class="params">(file)</span></span></span><br><span class="line">  <span class="keyword">local</span> data = &#123;&#125;</span><br><span class="line">  <span class="keyword">local</span> content</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Check if the file exists</span></span><br><span class="line">  <span class="comment">-- Resource: http://stackoverflow.com/a/4991602/325852</span></span><br><span class="line">  <span class="keyword">local</span> f=<span class="built_in">io</span>.<span class="built_in">open</span>(file,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> f~=<span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    content = f:<span class="built_in">read</span>(<span class="string">&quot;*all&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">close</span>(f)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- Return the empty array</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lines</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Translate Lua value to/from JSON</span></span><br><span class="line">  data = cjson.decode(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> shuffle(data)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Load URL requests from file</span></span><br><span class="line">requests = load_request_objects_from_file(<span class="string">&quot;./data/requests.json&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Check if at least one path was found in the file</span></span><br><span class="line"><span class="keyword">if</span> #requests &lt;= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;multiplerequests: No requests found.&quot;</span>)</span><br><span class="line">  <span class="built_in">os</span>.<span class="built_in">exit</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;multiplerequests: Found &quot;</span> .. #requests .. <span class="string">&quot; requests&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Initialize the requests array iterator</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">request = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  <span class="comment">-- Get the next requests array element</span></span><br><span class="line">  <span class="keyword">local</span> request_object = requests[counter]</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Increment the counter</span></span><br><span class="line">  counter = counter + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">-- If the counter is longer than the requests array length then reset it</span></span><br><span class="line">  <span class="keyword">if</span> counter &gt; #requests <span class="keyword">then</span></span><br><span class="line">    counter = <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">-- Return the request object with the current URL path</span></span><br><span class="line">  <span class="keyword">return</span> wrk.<span class="built_in">format</span>(request_object.method, request_object.<span class="built_in">path</span>, request_object.headers, request_object.body)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面脚本依赖<code>lua</code>的<code>cjson</code>包,其目的是解析<code>/data/requests.json</code>构造对应的<code>request</code>请求.</p><h2 id="data-requests-json"><a href="#data-requests-json" class="headerlink" title="/data/requests.json"></a><code>/data/requests.json</code></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/path-1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;&#123;\&quot;quote\&quot;: \&quot;\&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;headers&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// path 为web服务的url路径</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/path-2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;&#123;\&quot;quote\&quot;: \&quot;\&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;headers&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h2><p><code>./wrk -c100 -t16 -d5s -s ./mul.lua http://127.0.0.1:5000</code></p><p><code>-c</code>:(concurrent)并发数</p><p><code>-t</code>:(threads)线程数</p><p><code>-d</code>:(duration)持续时间</p><p>其它具体使用方法可去看文档及示例: <a href="https://github.com/wg/wrk">https://github.com/wg/wrk</a></p><h3 id="疑问-测试actix时-cpu-内存-网络占用-都特别低-cpu使用百分之一不到-说明程序还远未达到硬件的性能瓶颈"><a href="#疑问-测试actix时-cpu-内存-网络占用-都特别低-cpu使用百分之一不到-说明程序还远未达到硬件的性能瓶颈" class="headerlink" title="疑问 测试actix时,cpu,内存,网络占用,都特别低,cpu使用百分之一不到,说明程序还远未达到硬件的性能瓶颈"></a>疑问 测试actix时,cpu,内存,网络占用,都特别低,cpu使用百分之一不到,说明程序还远未达到硬件的性能瓶颈</h3><p>Linux的性能测试工具 <a href="http://www.brendangregg.com/perf.html">Perf</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;并发测试工具&quot;&gt;&lt;a href=&quot;#并发测试工具&quot; class=&quot;headerlink&quot; title=&quot;并发测试工具&quot;&gt;&lt;/a&gt;并发测试工具&lt;/h1&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>rust类属性宏</title>
    <link href="https://60ke.github.io/2021/01/08/rust%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%8F/"/>
    <id>https://60ke.github.io/2021/01/08/rust%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%8F/</id>
    <published>2021-01-08T03:18:27.000Z</published>
    <updated>2021-03-03T02:08:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.创建macro_test项目<br><code>cargo new macro_test</code><br>2.创建<code>macro_test_derive</code>项目实现宏的代码逻辑<br><code>cargo new macro_test_derive --lib</code><br>在<code>macro_test_derive</code>的Cargo.toml中声明lib标识<code>proc-macro</code></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[lib]</span></span><br><span class="line"><span class="attr">crate-type</span> = [<span class="string">&quot;proc-macro&quot;</span>]</span><br></pre></td></tr></table></figure><p>也可用</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[lib]</span></span><br><span class="line"><span class="attr">proc-macro</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.宏逻辑代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> proc_macro::TokenStream;</span><br><span class="line"><span class="keyword">use</span> quote::quote;</span><br><span class="line"><span class="keyword">use</span> cfg_if::cfg_if;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[proc_macro_attribute]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">macro_test_derive</span></span>(attr: TokenStream, input: TokenStream) -&gt; TokenStream &#123;</span><br><span class="line">    cfg_if!&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="meta">#[cfg(feature = <span class="meta-string">&quot;test&quot;</span>)]</span>&#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;the attr is11 &#123;:?&#125;&quot;</span>,attr.to_string());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (quote! &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">hello1</span></span>()&#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;it&#x27;s hello1&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).into()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.<code>main.rs</code>调用宏测试</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> macro_test_derive::macro_test_derive;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_test_derive(K)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">hello</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unimplemented!</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    hello1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目地址:<a href="https://github.com/60ke/rust_code_test/tree/main/macro_test">https://github.com/60ke/rust_code_test/tree/main/macro_test</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.创建macro_test项目&lt;br&gt;&lt;code&gt;cargo new macro_test&lt;/code&gt;&lt;br&gt;2.创建&lt;code&gt;macro_test_derive&lt;/code&gt;项目实现宏的代码逻辑&lt;br&gt;&lt;code&gt;cargo new macro_test_derive --lib&lt;/code&gt;&lt;br&gt;在&lt;code&gt;macro_test_derive&lt;/code&gt;的Cargo.toml中声明lib标识&lt;code&gt;proc-macro&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>智能合约sdk开发</title>
    <link href="https://60ke.github.io/2020/12/16/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6sdk%E5%BC%80%E5%8F%91/"/>
    <id>https://60ke.github.io/2020/12/16/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6sdk%E5%BC%80%E5%8F%91/</id>
    <published>2020-12-16T10:39:08.000Z</published>
    <updated>2021-03-03T02:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>架构:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------------+</span><br><span class="line">|         standard library         |----------------&gt; |合约标准库如 U256 Address等</span><br><span class="line">+----------------------------------+</span><br><span class="line">|         rs contract file         |----------------&gt; |rust 合约初始文件</span><br><span class="line">+----------------------------------+</span><br><span class="line">|             rust sdk             |----------------&gt; |包装合约初始文件(为其添加deploy,call方法)</span><br><span class="line">+----------------------------------+</span><br><span class="line">|      contract middle layer       |----------------&gt; |外部导入虚拟机存储读写接口</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;架构:&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>rust num</title>
    <link href="https://60ke.github.io/2020/12/11/rust-num/"/>
    <id>https://60ke.github.io/2020/12/11/rust-num/</id>
    <published>2020-12-11T07:03:43.000Z</published>
    <updated>2021-03-03T02:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发<code>wasm2ct</code>时遇到了这行代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">construct_uint! &#123;</span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">U256</span></span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宏展开之后为:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">IntellijRustDollarCrate::construct_uint! &#123; @ construct  <span class="keyword">pub</span>  <span class="class"><span class="keyword">struct</span> <span class="title">U256</span></span> ( <span class="number">4</span> ) ; &#125;</span><br><span class="line"><span class="keyword">impl</span> ::uint::core_::convert::<span class="built_in">From</span>&lt;<span class="built_in">u128</span>&gt; <span class="keyword">for</span> U256 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(value: <span class="built_in">u128</span>) -&gt; U256 &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line">        ret[<span class="number">0</span>] = value <span class="keyword">as</span> <span class="built_in">u64</span>;</span><br><span class="line">        ret[<span class="number">1</span>] = (value &gt;&gt; <span class="number">64</span>) <span class="keyword">as</span> <span class="built_in">u64</span>;</span><br><span class="line">        U256(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> ::uint::core_::convert::<span class="built_in">From</span>&lt;<span class="built_in">i128</span>&gt; <span class="keyword">for</span> U256 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(value: <span class="built_in">i128</span>) -&gt; U256 &#123;</span><br><span class="line">        <span class="keyword">match</span> value &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="literal">true</span> =&gt; <span class="built_in">From</span>::from(value <span class="keyword">as</span> <span class="built_in">u128</span>),</span><br><span class="line">            <span class="literal">false</span> =&gt; &#123; <span class="built_in">panic!</span>(<span class="string">&quot;Unsigned integer can&#x27;t be created from negative value&quot;</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> U256 &#123;</span><br><span class="line">    <span class="comment">/// Low 2 words (u128) </span></span><br><span class="line">    <span class="meta">#[inline]</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">const</span> <span class="function"><span class="keyword">fn</span> <span class="title">low_u128</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u128</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &amp;U256(<span class="keyword">ref</span> arr) = <span class="keyword">self</span>;</span><br><span class="line">        ((arr[<span class="number">1</span>] <span class="keyword">as</span> <span class="built_in">u128</span>) &lt;&lt; <span class="number">64</span>) + arr[<span class="number">0</span>] <span class="keyword">as</span> <span class="built_in">u128</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Conversion to u128 with overflow checking</span></span><br><span class="line">   <span class="comment">///</span></span><br><span class="line">   <span class="comment">/// # Panics</span></span><br><span class="line">   <span class="comment">///</span></span><br><span class="line">   <span class="comment">/// Panics if the number is larger than 2^128. </span></span><br><span class="line">    <span class="meta">#[inline]</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">as_u128</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u128</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &amp;U256(<span class="keyword">ref</span> arr) = <span class="keyword">self</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[i] != <span class="number">0</span> &#123;</span><br><span class="line">                <span class="built_in">panic!</span>(<span class="string">&quot;Integer overflow when casting to u128&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.low_u128()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> ::uint::core_::convert::TryFrom&lt;U256&gt; <span class="keyword">for</span> <span class="built_in">u128</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Error</span></span> = &amp;<span class="symbol">&#x27;static</span> <span class="built_in">str</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[inline]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">try_from</span></span>(u: U256) -&gt; ::uint::core_::result::<span class="built_in">Result</span>&lt;<span class="built_in">u128</span>, &amp;<span class="symbol">&#x27;static</span> <span class="built_in">str</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> U256(arr) = u;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">4</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[i] != <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">Err</span>(<span class="string">&quot;integer overflow when casting to u128&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">Ok</span>(((arr[<span class="number">1</span>] <span class="keyword">as</span> <span class="built_in">u128</span>) &lt;&lt; <span class="number">64</span>) + arr[<span class="number">0</span>] <span class="keyword">as</span> <span class="built_in">u128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> ::uint::core_::convert::TryFrom&lt;U256&gt; <span class="keyword">for</span> <span class="built_in">i128</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Error</span></span> = &amp;<span class="symbol">&#x27;static</span> <span class="built_in">str</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[inline]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">try_from</span></span>(u: U256) -&gt; ::uint::core_::result::<span class="built_in">Result</span>&lt;<span class="built_in">i128</span>, &amp;<span class="symbol">&#x27;static</span> <span class="built_in">str</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> err_str = <span class="string">&quot;integer overflow when casting to i128&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="built_in">u128</span>::try_from(u).map_err(|_| err_str)?;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="built_in">i128</span>::max_value() <span class="keyword">as</span> <span class="built_in">u128</span> &#123;</span><br><span class="line">            <span class="literal">Err</span>(err_str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">Ok</span>(i <span class="keyword">as</span> <span class="built_in">i128</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意到在代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> ::uint::core_::convert::<span class="built_in">From</span>&lt;<span class="built_in">u128</span>&gt; <span class="keyword">for</span> U256 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(value: <span class="built_in">u128</span>) -&gt; U256 &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ret = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line">        ret[<span class="number">0</span>] = value <span class="keyword">as</span> <span class="built_in">u64</span>;</span><br><span class="line">        ret[<span class="number">1</span>] = (value &gt;&gt; <span class="number">64</span>) <span class="keyword">as</span> <span class="built_in">u64</span>;</span><br><span class="line">        U256(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中转化<code>u128</code>为<code>u64</code>分为三步:</p><ol><li>设置数组<code>[u64;4]</code>存储<code>U256</code>,将<code>u128</code>存到数组前两个位置</li><li>存储低位到<code>数组[0]</code>,即<code>u128 as u256</code></li><li>存储高位到<code>数组[1]</code>,即<code>value &gt;&gt; 64</code><br>rust 标准库中已经包含了<code>u128</code>的数据类型<a href="https://doc.rust-lang.org/std/u128/index.html">U128</a>,rust中当大数转小数,例如u128转u64,u64转u32时,使用<code>as</code>关键字,且当大位数超出小位数时,均以最后长度的数字赋值.(额外的关于<code>as</code>的实现与重载(<a href="https://github.com/rust-lang/rust/issues/6016)).%E4%BB%A3%E7%A0%81%E9%AA%8C%E8%AF%81">https://github.com/rust-lang/rust/issues/6016)).代码验证</a></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">u128</span>::MAX / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">u64</span>::MAX;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;u64 max &#123;&#125;&quot;</span>,b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;u64 max as u32 &#123;&#125;&quot;</span>,(b-<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">u32</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;u32 max &#123;&#125;&quot;</span>,<span class="built_in">u32</span>::MAX);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world! &#123;&#125;&quot;</span>,a <span class="keyword">as</span> <span class="built_in">u64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2 &gt;&gt; 1 is &#123;&#125;&quot;</span>,<span class="number">2</span>&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2 &gt;&gt; 2 is &#123;&#125;&quot;</span>,<span class="number">2</span>&gt;&gt;<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;3 &gt;&gt; 1 is &#123;&#125;&quot;</span>,<span class="number">3</span>&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;5 &gt;&gt; 1 is &#123;&#125;&quot;</span>,<span class="number">5</span>&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;5 &gt;&gt; 2 is &#123;&#125;&quot;</span>,<span class="number">5</span>&gt;&gt;<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;开发&lt;code&gt;wasm2ct&lt;/code&gt;时遇到了这行代码&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>rust macro</title>
    <link href="https://60ke.github.io/2020/12/02/rust-macro/"/>
    <id>https://60ke.github.io/2020/12/02/rust-macro/</id>
    <published>2020-12-02T10:25:31.000Z</published>
    <updated>2021-03-03T02:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>先放代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> say_hello &#123;</span><br><span class="line">    ($arg:expr) =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, $arg);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">macro_rules!</span> re_hello &#123;</span><br><span class="line">    ($arg:expr) =&gt; &#123;</span><br><span class="line">        say_hello!($arg);</span><br><span class="line">        say_hello!($arg)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">macro_rules!</span> many_greetings &#123;</span><br><span class="line">    ($times:expr) =&gt; &#123;&#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..$times &#123;</span><br><span class="line">            re_hello!(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&quot;111&quot;</span>;</span><br><span class="line">    re_hello!(a);</span><br><span class="line">    many_greetings!(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;先放代码&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://60ke.github.io/categories/rust/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>rust From&lt;T&gt;</title>
    <link href="https://60ke.github.io/2020/11/17/rust-From-T/"/>
    <id>https://60ke.github.io/2020/11/17/rust-From-T/</id>
    <published>2020-11-17T06:57:08.000Z</published>
    <updated>2021-03-03T02:08:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>在对wasm2contract的开发中遇到了这样的代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">TokenInterface</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">constructor</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, _total_supply: <span class="built_in">u8</span>);</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">totalsupply</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">u8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">TokenEndpoint</span></span>&lt;T: TokenInterface&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> inner: T,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;T: TokenInterface&gt; <span class="built_in">From</span>&lt;T&gt; <span class="keyword">for</span> TokenEndpoint&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(inner: T) -&gt; TokenEndpoint&lt;T&gt; &#123;</span><br><span class="line">        TokenEndpoint &#123; inner: inner &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;T: TokenInterface&gt; TokenEndpoint&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(inner: T) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        TokenEndpoint &#123; inner: inner &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pub fn from(inner: T) -&gt; Self &#123;</span></span><br><span class="line">    <span class="comment">//     TokenEndpoint &#123; inner: inner &#125;</span></span><br><span class="line">    <span class="comment">// &#125;    </span></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">instance</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.inner</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">TokenContract</span></span>&#123;</span><br><span class="line">    x:<span class="built_in">u8</span>,</span><br><span class="line">    y:<span class="built_in">u8</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> TokenInterface <span class="keyword">for</span> TokenContract &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">constructor</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, total_supply: <span class="built_in">u8</span>) &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,total_supply)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">totalsupply</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">        <span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> endpoint = TokenEndpoint::from(TokenContract&#123;x:<span class="number">3</span>,y:<span class="number">4</span>&#125;);</span><br><span class="line">    <span class="keyword">let</span> endpoint2 = TokenEndpoint::new(TokenContract&#123;x:<span class="number">3</span>,y:<span class="number">4</span>&#125;);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> test = TokenContract&#123;x:<span class="number">1</span>,y:<span class="number">2</span>&#125;;</span><br><span class="line">    test.constructor(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125; \n &#123;:#?&#125; &quot;</span>,endpoint.instance(),endpoint2.instance())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(inner: T) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">    TokenEndpoint &#123; inner: inner &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T: TokenInterface&gt; <span class="built_in">From</span>&lt;T&gt; <span class="keyword">for</span> TokenEndpoint&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(inner: T) -&gt; TokenEndpoint&lt;T&gt; &#123;</span><br><span class="line">        TokenEndpoint &#123; inner: inner &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数中最终实现的效果一样。<br>继续探究<code>From&lt;T&gt;</code><br>From和Into是定义于std：：convert模块中的两个trait。它们定义了from和into两个方法，这两个方法互为反操作。From和Into的内部实现:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">From</span></span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(T) -&gt; <span class="keyword">Self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Into</span></span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">into</span></span>(<span class="keyword">self</span>) -&gt; T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> string1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> string2 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> string3:<span class="built_in">String</span> = string1.into();</span><br><span class="line">    <span class="built_in">assert_eq!</span>(string1,string2);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(string3,string2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于类型T，如果它实现了From＜U＞，则可以通过T：：from（u）来生成T类型的实例，此处u为U的类型实例。</p><p>对于类型T，如果它实现了Into＜U＞，则可以通过into方法来消耗自身转换为类型U的新实例。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在对wasm2contract的开发中遇到了这样的代码：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ewasm虚拟机开发</title>
    <link href="https://60ke.github.io/2020/09/22/ewasm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
    <id>https://60ke.github.io/2020/09/22/ewasm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91/</id>
    <published>2020-09-22T03:05:04.000Z</published>
    <updated>2021-03-03T02:08:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="解析wasm字节码"><a href="#解析wasm字节码" class="headerlink" title="解析wasm字节码"></a>解析wasm字节码</h2><p><a href="https://webassembly.github.io/spec/core/intro/overview.html">wasm概览</a><br><a href="https://webassembly.github.io/spec/core/binary/instructions.html#">wasm指令集</a><br><a href="https://webassembly.github.io/spec/core/binary/types.html">wasm类型</a><br><img src="http://ww1.sinaimg.cn/large/6cf740f6ly1gizds6acxgj20f50hr0tf.jpg" alt="wasm格式"></p><span id="more"></span><p>wasm包含12种section:<br><img src="http://ww1.sinaimg.cn/large/6cf740f6ly1gizdyr165zj20a308ywek.jpg" alt="undefined"><br>每个section包括:</p><ul><li>section id(大小1字节)</li><li>section size(格式为u32记录section大小)</li><li>data(section中保存的内容，格式取决于section id)</li></ul><p>每个 section 都是可选的, 如果某个 wasm 模块省略了某个 section, 则等同于存在一个内容为空的 section.</p><p><a href="https://wasdk.github.io/WasmFiddle/?%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E7%BC%96%E8%AF%91c/c++%E4%B8%BAwasm%E6%A0%BC%E5%BC%8F%E3%80%82">https://wasdk.github.io/WasmFiddle/?这个网站可以编译c/c++为wasm格式。</a><br>用一个简单的例子来说明对wasm二进制的解析:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的wast格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(module</span><br><span class="line"> (table 0 anyfunc)</span><br><span class="line"> (memory $0 1)</span><br><span class="line"> (export &quot;memory&quot; (memory $0))</span><br><span class="line"> (export &quot;main&quot; (func $main))</span><br><span class="line"> (func $main (; 0 ;) (result i32)</span><br><span class="line">  (i32.const 42)</span><br><span class="line"> )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>对应的二进制:<br><img src="http://ww1.sinaimg.cn/large/6cf740f6ly1gizf1xbp18j21120640ub.jpg" alt="411600756416_.pic.jpg"></p><p>二进制码:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x61</span>&#x27;, &#x27;<span class="number">0x73</span>&#x27;, &#x27;<span class="number">0x6d</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x85</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x60</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x7f</span>&#x27;, &#x27;<span class="number">0x3</span>&#x27;, &#x27;<span class="number">0x82</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x4</span>&#x27;, &#x27;<span class="number">0x84</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x70</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x5</span>&#x27;, &#x27;<span class="number">0x83</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x6</span>&#x27;, &#x27;<span class="number">0x81</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x7</span>&#x27;, &#x27;<span class="number">0x91</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x2</span>&#x27;, &#x27;<span class="number">0x6</span>&#x27;, &#x27;<span class="number">0x6d</span>&#x27;, &#x27;<span class="number">0x65</span>&#x27;, &#x27;<span class="number">0x6d</span>&#x27;, &#x27;<span class="number">0x6f</span>&#x27;, &#x27;<span class="number">0x72</span>&#x27;, &#x27;<span class="number">0x79</span>&#x27;, &#x27;<span class="number">0x2</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x4</span>&#x27;, &#x27;<span class="number">0x6d</span>&#x27;, &#x27;<span class="number">0x61</span>&#x27;, &#x27;<span class="number">0x69</span>&#x27;, &#x27;<span class="number">0x6e</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0xa</span>&#x27;, &#x27;<span class="number">0x8a</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x1</span>&#x27;, &#x27;<span class="number">0x84</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x80</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x0</span>&#x27;, &#x27;<span class="number">0x41</span>&#x27;, &#x27;<span class="number">0x2a</span>&#x27;, &#x27;<span class="number">0xb</span>&#x27;]</span><br></pre></td></tr></table></figure><p>一步步分析:<br>前八个字节表示的东西是固定的。<code>&#39;0x0&#39;, &#39;0x61&#39;, &#39;0x73&#39;, &#39;0x6d&#39;</code>前四个字节表示<code>\0asm</code>.<code>&#39;0x1&#39;, &#39;0x0&#39;, &#39;0x0&#39;, &#39;0x0&#39;</code>表示为1的版本号。</p><p>wasm采用LEB128编码:<br>谷歌为了省点空间，在安卓中用了这个压缩标准，其原理就是一个4字节32位的数字，一般很少占满，比如数字1，2等，它其实用几位就可以表示。下面看看它的工作原理：<br>1）忽略高字节的正负代表位。<br>2）每七位组成一组，待编码。<br>3）有符号和无符号的分成不同的情况来处理。<br>4）无符号，最高位为0表示结束，1表示还有后续字节。待编码的七位为数据。<br>5）有符号的处理，同上，但需要处理高位为0的不同情况。<br>6）有符号的处理，同上，需要处理高位为1的不同情况。<br>从上面可以看出无符号比较简单，有符号还需要处理几种情况，这里举一个无符号的例子，简单理解一下，更多请查阅相关资料：<br>编码：<br>十六进制数字：0x238 ========&gt; 二进制 0000 0010 0011 1000<br>分成两个七位的组：0000100(高位)， 0111000（低位）<br>0000100后面没数据了，所以前面加一个0；0111000后面还有一个字节，所以高为为1，则变为：<br>00000100(即：0x04),10111000(0x70)</p><p>则小端存放的数据为：0x70,0x04<br>解码：<br>正好相反，把数据拆开，按编码逆向过程即可。</p><p>对于rust，我们可以直接用现有的crate:<a href="https://github.com/paritytech/parity-wasm">parity-wasm</a>对wasm进行解析。</p><h2 id="wasm解析器"><a href="#wasm解析器" class="headerlink" title="wasm解析器"></a>wasm解析器</h2><p><a href="https://github.com/paritytech/wasmi">wasmi</a></p><h2 id="可运行wasm的虚拟机"><a href="#可运行wasm的虚拟机" class="headerlink" title="可运行wasm的虚拟机"></a>可运行wasm的虚拟机</h2><p><a href="https://github.com/openethereum/openethereum/tree/master/ethcore/wasm">vm</a></p><h2 id="生成可被wasmi执行的合约"><a href="#生成可被wasmi执行的合约" class="headerlink" title="生成可被wasmi执行的合约"></a>生成可被wasmi执行的合约</h2><h3 id="pwasm-abi"><a href="#pwasm-abi" class="headerlink" title="pwasm-abi"></a><a href="https://github.com/openethereum/pwasm-abi">pwasm-abi</a></h3><p>使用过程宏生成类型solidity合约代码结构的rust合约,并最终编译为wasm-unkonwn-unkonwn(wasm).</p><p>最终生成的合约:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![no_std]</span></span><br><span class="line"><span class="meta">#![allow(non_snake_case)]</span></span><br><span class="line"><span class="meta">#![feature(proc_macro_hygiene)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> pwasm_std;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> pwasm_ethereum;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> pwasm_abi;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> pwasm_abi_derive;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> alloc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> array &#123;</span><br><span class="line">    <span class="keyword">use</span> pwasm_ethereum;</span><br><span class="line">    <span class="keyword">use</span> pwasm_abi::types::*;</span><br><span class="line">    <span class="keyword">use</span> pwasm_abi_derive::eth_abi;</span><br><span class="line">    <span class="keyword">use</span> alloc::collections::BTreeMap;</span><br><span class="line">    <span class="keyword">use</span> alloc::format;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">#[eth_abi(TokenEndpoint, TokenClient)]</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">ArrayInterface</span></span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">constructor</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>);</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">double_array</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,x:U256,y:U256)-&gt; U256;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArrayContract</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> ArrayInterface <span class="keyword">for</span> ArrayContract&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">double_array</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,x:U256,y:U256) -&gt; U256&#123;</span><br><span class="line">            U256::from(x) + U256::from(x)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">constructor</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> pwasm_abi::eth::EndpointInterface;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">call</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> endpoint = array::TokenEndpoint::new(array::ArrayContract&#123;&#125;);</span><br><span class="line">    <span class="comment">// Read http://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding for details</span></span><br><span class="line">    pwasm_ethereum::ret(&amp;endpoint.dispatch(&amp;pwasm_ethereum::input()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">deploy</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> endpoint = array::TokenEndpoint::new(array::ArrayContract&#123;&#125;);</span><br><span class="line">    endpoint.dispatch_ctor(&amp;pwasm_ethereum::input());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的合约通过<code>eth_abi</code>这个过程宏生成了wasm合约.<br>宏展开的部分代码如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dispatch</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, payload: &amp;[<span class="built_in">u8</span>]) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> inner = &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.inner;</span><br><span class="line">    <span class="keyword">if</span> payload.len() &lt; <span class="number">4</span> &#123;</span><br><span class="line">        ::core::panicking::panic(<span class="string">&quot;Invalid abi invoke&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> method_id = ((payload[<span class="number">0</span>] <span class="keyword">as</span> <span class="built_in">u32</span>) &lt;&lt; <span class="number">24</span>)</span><br><span class="line">        + ((payload[<span class="number">1</span>] <span class="keyword">as</span> <span class="built_in">u32</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">        + ((payload[<span class="number">2</span>] <span class="keyword">as</span> <span class="built_in">u32</span>) &lt;&lt; <span class="number">8</span>)</span><br><span class="line">        + (payload[<span class="number">3</span>] <span class="keyword">as</span> <span class="built_in">u32</span>);</span><br><span class="line">    <span class="keyword">let</span> method_payload = &amp;payload[<span class="number">4</span>..];</span><br><span class="line">    <span class="keyword">match</span> method_id &#123;</span><br><span class="line">        <span class="number">870935635u32</span> =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> pwasm_ethereum::value() &gt; <span class="number">0</span>.into() &#123;</span><br><span class="line">                ::core::panicking::panic(</span><br><span class="line">                    <span class="string">&quot;Unable to accept value in non-payable constructor call&quot;</span>,</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> stream = pwasm_abi::eth::Stream::new(method_payload);</span><br><span class="line">            <span class="keyword">let</span> result = inner.double_array(</span><br><span class="line">                stream.pop::&lt;U256&gt;().expect(<span class="string">&quot;argument decoding failed&quot;</span>),</span><br><span class="line">                stream.pop::&lt;U256&gt;().expect(<span class="string">&quot;argument decoding failed&quot;</span>),</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> sink = pwasm_abi::eth::Sink::new(<span class="number">1usize</span>);</span><br><span class="line">            sink.push(result);</span><br><span class="line">            sink.finalize_panicking()</span><br><span class="line">        &#125;</span><br><span class="line">        _ =&gt; ::core::panicking::panic(<span class="string">&quot;Invalid method signature&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">double_array</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, x: U256, y: U256) -&gt; U256 &#123;</span><br><span class="line">    <span class="meta">#![allow(unused_mut)]</span></span><br><span class="line">    <span class="meta">#![allow(unused_variables)]</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> payload = <span class="built_in">Vec</span>::with_capacity(<span class="number">4</span> + <span class="number">2usize</span> * <span class="number">32</span>);</span><br><span class="line">    payload.push((<span class="number">870935635u32</span> &gt;&gt; <span class="number">24</span>) <span class="keyword">as</span> <span class="built_in">u8</span>);</span><br><span class="line">    payload.push((<span class="number">870935635u32</span> &gt;&gt; <span class="number">16</span>) <span class="keyword">as</span> <span class="built_in">u8</span>);</span><br><span class="line">    payload.push((<span class="number">870935635u32</span> &gt;&gt; <span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">u8</span>);</span><br><span class="line">    payload.push(<span class="number">870935635u32</span> <span class="keyword">as</span> <span class="built_in">u8</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> sink = pwasm_abi::eth::Sink::new(<span class="number">2usize</span>);</span><br><span class="line">    sink.push(x);</span><br><span class="line">    sink.push(y);</span><br><span class="line">    sink.drain_to(&amp;<span class="keyword">mut</span> payload);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> result = [<span class="number">0u8</span>; <span class="number">32</span>];</span><br><span class="line">    pwasm_ethereum::call(</span><br><span class="line">        <span class="keyword">self</span>.gas.unwrap_or(<span class="number">200000</span>),</span><br><span class="line">        &amp;<span class="keyword">self</span>.address,</span><br><span class="line">        <span class="keyword">self</span>.value.clone().unwrap_or(U256::zero()),</span><br><span class="line">        &amp;payload,</span><br><span class="line">        &amp;<span class="keyword">mut</span> result[..],</span><br><span class="line">    )</span><br><span class="line">    .expect(<span class="string">&quot;Call failed; todo: allow handling inside contracts&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> stream = pwasm_abi::eth::Stream::new(&amp;result);</span><br><span class="line">    stream.pop().expect(<span class="string">&quot;failed decode call output&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合约编译的内部实现中通过需要通过<code>eth_abi</code>接口将函数重命名.<br>这样我们在调用合约时,通过<code>eth_abi</code>编码的数据才能被合约识别运行.</p><p><a href="https://web3js.readthedocs.io/en/v1.3.0/web3-eth-abi.html#">web3eth_abi编码</a></p><h3 id="wasm-build"><a href="#wasm-build" class="headerlink" title="wasm-build"></a><a href="https://github.com/paritytech/wasm-utils/tree/master/cli/build">wasm-build</a></h3><p>已生成的wasm合约不能直接被vm运行,wasm-build将由pwasm写的合约再次处理转化为可被vm执行的wasm合约文件.</p><p>wasm-build的工作:<br>1.解析wasm module提取以下section:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(section) = sections.pop() &#123;</span><br><span class="line">  <span class="keyword">match</span> section &#123;</span><br><span class="line">    elements::Section::Type(sect) =&gt; &#123; types = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Import(sect) =&gt; &#123; import = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Function(sect) =&gt; &#123; funcs = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Table(sect) =&gt; &#123; table = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Memory(sect) =&gt; &#123; memory = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Global(sect) =&gt; &#123; global = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Export(sect) =&gt; &#123; export = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Start(index) =&gt; &#123; start = <span class="literal">Some</span>(index); &#125;</span><br><span class="line">    elements::Section::Element(sect) =&gt; &#123; element = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Code(sect) =&gt; &#123; code = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    elements::Section::Data(sect) =&gt; &#123; data = <span class="literal">Some</span>(sect); &#125;</span><br><span class="line">    _ =&gt; &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将wasm的module优化为:</p><ul><li>Type</li><li>Import</li><li>Function</li><li>Table</li><li>Memory</li><li>Global</li><li>Export</li><li>Start</li><li>Code</li><li>Data</li><li>other</li></ul><p>2.优化函数名及构造函数deploy,call,end等模块.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;</summary>
    
    
    
    <category term="wasm" scheme="https://60ke.github.io/categories/wasm/"/>
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
    <category term="wasm" scheme="https://60ke.github.io/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>hexo更改post模板</title>
    <link href="https://60ke.github.io/2020/09/22/hexo%E6%9B%B4%E6%94%B9post%E6%A8%A1%E6%9D%BF/"/>
    <id>https://60ke.github.io/2020/09/22/hexo%E6%9B%B4%E6%94%B9post%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-09-22T02:54:03.000Z</published>
    <updated>2021-03-03T02:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>运行<code>hexo new post</code>时，现在的模板是</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>默认无分类<br>在<code>scaffolds</code>更改<code>post.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>就好了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;运行&lt;code&gt;hexo new post&lt;/code&gt;时，现在的模板是&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="https://60ke.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode奇技淫巧</title>
    <link href="https://60ke.github.io/2020/09/18/vscode%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    <id>https://60ke.github.io/2020/09/18/vscode%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/</id>
    <published>2020-09-18T06:29:16.000Z</published>
    <updated>2021-03-03T02:08:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户代码片段"><a href="#用户代码片段" class="headerlink" title="用户代码片段"></a>用户代码片段</h2><p>之前在sublime上常用tmpl插件来新建python文件，文件默认包含头文件模板。vscode可以直接添加与文件相关的代码片段。<br>python用户代码片段:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;HEADER&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;header&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;#!/usr/bin/env python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;# -*- encoding: utf-8 -*-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#x27;&#x27;&#x27;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@File    :   $TM_FILENAME&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@Author  :   worileqing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@Version :   1.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@Contact :   worileqing@163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@Desc    :   None&quot;</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="string">&quot;&#x27;&#x27;&#x27;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;# here put the import lib&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$0&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>markdown用户代码片段:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;HEADER&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;HEADER&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;code is&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;code is cheap,show code:&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是创建完成配置未能在markdown中生效，解决办法:<br>在setting.json中添加:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;[markdown]&quot;: &#123;</span><br><span class="line">    &quot;editor.quickSuggestions&quot;: &#123;</span><br><span class="line">        &quot;other&quot;: true,</span><br><span class="line">        &quot;comments&quot;: false,</span><br><span class="line">        &quot;strings&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#125;, </span><br></pre></td></tr></table></figure><h2 id="coder-runner"><a href="#coder-runner" class="headerlink" title="coder runner"></a>coder runner</h2><p>可以在任意类型的文件里面选中代码 <code>code run by some language</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;用户代码片段&quot;&gt;&lt;a href=&quot;#用户代码片段&quot; class=&quot;headerlink&quot; title=&quot;用户代码片段&quot;&gt;&lt;/a&gt;用户代码片段&lt;/h2&gt;</summary>
    
    
    
    
    <category term="vscode" scheme="https://60ke.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>rust闭包</title>
    <link href="https://60ke.github.io/2020/09/18/rust%E9%97%AD%E5%8C%85/"/>
    <id>https://60ke.github.io/2020/09/18/rust%E9%97%AD%E5%8C%85/</id>
    <published>2020-09-18T06:15:42.000Z</published>
    <updated>2021-03-03T02:08:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>“闭包（closure）是一种匿名函数，具有“捕获”外部变量的能力。闭包有时候也被称作lambda表达式。它有两个特点：（1）可以像函数一样被调用；（2）可以捕获当前环境中的变量。”</p><p>摘录来自: 范长春. “深入浅出Rust。”<br>闭包与函数的显著区别是闭包可以补货变量。</p><p>code is cheap,show code:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add_2</span></span>(a:<span class="built_in">i32</span>)-&gt;<span class="built_in">i32</span>&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;run func add_2&quot;</span>);</span><br><span class="line">    a + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = |x|x+<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;3 + 2 is &#123;&#125;&quot;</span>,a(<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">let</span> b = add_2(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b is &#123;&#125;&quot;</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>闭包的类型:<br>添加一个返回类型为闭包的函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">test_return</span></span>(a:<span class="built_in">i32</span>)-&gt;<span class="built_in">Box</span>&lt; <span class="built_in">Fn</span>(<span class="built_in">i32</span>)-&gt;<span class="built_in">i32</span>&gt;&#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;a is &#123;&#125; but unused\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">Box</span>::new(|x|x+<span class="number">2</span>);</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = test_return(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> d = c(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;d is &#123;&#125;&quot;</span>,d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cargo run</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   Compiling just_test v0.1.0 (/Users/ke/Desktop/rust_test/just_test)</span><br><span class="line">warning: trait objects without an explicit `dyn` are deprecated</span><br><span class="line"> --&gt; src/main.rs:2:29</span><br><span class="line">  |</span><br><span class="line">2 | fn test_return(a:i32)-&gt;Box&lt; Fn(i32)-&gt;i32&gt;&#123;</span><br><span class="line">  |                             ^^^^^^^^^^^^ <span class="built_in">help</span>: use `dyn`: `dyn Fn(i32)-&gt;i32`</span><br><span class="line">  |</span><br><span class="line">  = note: `<span class="comment">#[warn(bare_trait_objects)]` on by default</span></span><br><span class="line"></span><br><span class="line">warning: 1 warning emitted</span><br><span class="line"></span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.36s</span><br><span class="line">     Running `target/debug/just_test`</span><br><span class="line">a is 3 but unused</span><br><span class="line">d is 7</span><br></pre></td></tr></table></figure><p>上面的代码有两个需要注意的地方:</p><ul><li>返回类型里面的box：<br>rust的闭包又叫unboxed closure 本质是一个unboxed trait,当我们仅返回闭包时编译器会报错<code>return type cannot have an unboxed trait object</code>。因为匿名函数是编译器生成的匿名类型，根本不存在具体对象一说，这意味着它无法有一个明确的 size，所以只能被放置于 堆内存 之中，并取得一个 胖指针 （即除了原始指针以外还包括对指针、指针指向内存的额外描述信息等的 “指针”。故我们需要将closure boxed。</li><li>dyn warning:<br>这个问题可以参考:<br><a href="https://www.insp.top/article/lets-understand-new-keywords-those-impl-and-dyn-of-rust-2018-edition">理解 Rust 2018 edition 的两个新关键字 —— impl 和 dyn</a><br><a href="https://rustwiki.org/zh-CN/edition-guide/rust-2018/trait-system/impl-trait-for-returning-complex-types-with-ease.html">3.4.1. impl Trait 轻松返回复杂的类型</a><br>dyn 修饰trait是为了消除与impl trait的歧义，所以我们在了解dyn之前我们需要知道impl Trait:<br>将下面的函数用impl trait重写：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">test_return</span></span>(a:<span class="built_in">i32</span>)-&gt;<span class="built_in">Box</span>&lt; <span class="built_in">Fn</span>(<span class="built_in">i32</span>)-&gt;<span class="built_in">i32</span>&gt;&#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;a is &#123;&#125; but unused\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">Box</span>::new(|x|x+<span class="number">2</span>);</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>重写:<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">test_return</span></span>(a:<span class="built_in">i32</span>)-&gt; <span class="keyword">impl</span> <span class="built_in">Fn</span>(<span class="built_in">i32</span>)-&gt;<span class="built_in">i32</span>&#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;a is &#123;&#125; but unused\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">Box</span>::new(|x|x+<span class="number">2</span>);</span><br><span class="line">    b    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>测试可以正常运行。<br>impl Trait 是指定实现特定特征的未命名但有具体类型的新方法。重点在于有具体类型。因为有具体类型，匿名函数对于编译器来说是不确定trait，故需要进行box包装来返回，而impl trait由于已经约束了具体类型，所以可以直接作为函数返回类型。</li></ul><p>dyn是dynamic(动态的缩写),有了impl trait后使用dyn trait可以更好的与其对应以及消除类型歧义:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Trait</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Trait <span class="keyword">for</span> <span class="built_in">i32</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">function1</span></span>() -&gt; <span class="built_in">Box</span>&lt;Trait&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">function2</span></span>() -&gt; <span class="built_in">Box</span>&lt;<span class="keyword">dyn</span> Trait&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="额外的"><a href="#额外的" class="headerlink" title="额外的"></a>额外的</h2><p>用泛型重写上面的代码:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calc_by</span></span>&lt;F&gt;(var: &amp;<span class="built_in">i32</span>, f: F) -&gt; <span class="built_in">i32</span></span><br><span class="line">    <span class="keyword">where</span> F: <span class="built_in">Fn</span>(&amp;<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> local = *var;</span><br><span class="line">    f(&amp;local)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> local = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> result = calc_by(&amp;local, |i| i*<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;</summary>
    
    
    
    
    <category term="rust" scheme="https://60ke.github.io/tags/rust/"/>
    
  </entry>
  
</feed>
